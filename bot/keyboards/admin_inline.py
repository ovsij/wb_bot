from datetime import datetime, timedelta

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.formatting import *
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.config import load_config
from bot.keyboards import InlineConstructor, btn_back

config = load_config('.env')

def inline_kb_admin(db_request):
    text = as_line(Bold('ü¶∏üèª‚Äç‚ôÇÔ∏è –ö–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'),
                   '',
                   '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:',
                   '',
                   sep='\n'
    )
    for user in db_request.get_user(is_admin=True):
        user = db_request.get_user(id=user.id)
        last_name = user.last_name if user.last_name else ''
        first_name = user.first_name if user.first_name else ''
        text += as_line(TextLink(f'{first_name} {last_name} @{user.username}\n', url=f't.me/{user.username}'))
    
    text_and_data = [
        ['–†–∞—Å—Å—ã–ª–∫–∞', 'admin_sending'],
        ['–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', 'admin_addadmin'],
        ['–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', 'admin_deladmin'],
        ['–ö—É–ø–æ–Ω—ã', 'admin_coupon'],
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data)
    return text.as_html(), reply_markup

def inline_kb_sending():
    text = '–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:'
    reply_markup = InlineConstructor.create_kb([btn_back('admin_delete_msg')])
    return text, reply_markup

def inline_kb_addadmin():
    text = '–ü—Ä–∏—à–ª–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–±–µ–∑ @). –ù–∞–ø—Ä–∏–º–µ—Ä: Kilovatts'
    reply_markup = InlineConstructor.create_kb([btn_back('admin_delete_msg')])
    return text, reply_markup

def inline_kb_deladmin(db_request):
    admins = db_request.get_user(is_admin=True)
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å'
    text_and_data = []
    for admin in admins:
        if int(admin.tg_id) not in config.bot.admin_ids:
            text_and_data.append([admin.username, f'admin_deladmin_{admin.id}'])
    text_and_data.append(btn_back('admin'))
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text, reply_markup

def inline_kb_admin_coupon(db_request, coupon_id : int = None):
    if coupon_id:
        coupon = db_request.get_coupon(id=coupon_id)
        users = db_request.get_user(coupon_id=coupon.id)
        text = as_line(Bold(f'–ö—É–ø–æ–Ω: {coupon.name}'),
                       '',
                       f'–°—É–º–º–∞: {coupon.sum}',
                       '',
                       f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(users)}',
                       sep='\n'
                       )
        text_and_data = [
            ['–£–¥–∞–ª–∏—Ç—å –∫—É–ø–æ–Ω', f'admin_delcoupon_{coupon.id}'],
            ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', f'admin_coupusers_{coupon.id}'],
            btn_back('admin_coupon')
        ]
        reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
        return text.as_html(), reply_markup
    else:
        coupones = db_request.get_coupon()
        text = '–ö—É–ø–æ–Ω—ã'
        text_and_data = []
        for coupon in coupones:
            text_and_data.append([f'{coupon.name} | {coupon.sum}—Ä', f'admin_coupon_{coupon.id}'])
        text_and_data.append(['+ –î–æ–±–∞–≤–∏—Ç—å –∫—É–ø–æ–Ω', 'admin_addcoupon'])
        text_and_data.append(btn_back('admin'))
        reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
        return text, reply_markup
    
def inline_kb_delcoupon(db_request, coupon_id : int):
    coupon = db_request.get_coupon(id=coupon_id)
    text = as_line(f'–ö—É–ø–æ–Ω: {coupon.name}',
                   '',
                   '–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.',
                   '',
                   '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
                   sep='\n'
                   )
    text_and_data = [
        ['–£–¥–∞–ª–∏—Ç—å –∫—É–ø–æ–Ω', f'admin_delcoupon_accept_{coupon.id}'],
        btn_back(f'admin_coupon_{coupon.id}')
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_addcoupon(stage : str):
    if stage == 'name':
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:'
    else:
        text = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—É–ø–æ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö:'
    reply_markup = InlineConstructor.create_kb(text_and_data=[btn_back('admin_coupon')])
    return text, reply_markup

def inline_kb_couponusers(db_request, coupon_id : int):
    coupon = db_request.get_coupon(id=coupon_id)
    text = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ'
    reply_markup = InlineConstructor.create_kb(text_and_data=[['–°–∫—Ä—ã—Ç—å', 'admin_delete_msg']])
    return text, reply_markup