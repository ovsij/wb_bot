from datetime import datetime, timedelta

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.formatting import *
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.config import load_config
from bot.keyboards import InlineConstructor, btn_back

config = load_config('.env')

def inline_kb_start():
    text = as_line('ü§úüèª {bot_name} - —ç—Ç–æ –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ Wildberries. ',
                   '',
                   Bold('–ë–û–¢ –ü–û–ö–ê–ñ–ï–¢:  '),
                   '',
                   'üõí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö;',
                   '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∫—É–ø–∞—Ö;',
                   '‚Ü© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–∞—Ö;',
                   'üíº –§–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–æ –∑–∞–∫–∞–∑—É;',
                   'üíé –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∞—Ä—Ç–∏–∫—É–ª—É;',
                   'üåê –†–µ–≥–∏–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏;',
                   'üì¶ –†–µ–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–≤–∞—Ç–∏—Ç —Ä–µ–∑–µ—Ä–≤–∞;',
                   'üöó –°–æ–æ–±—â–∏—Ç –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–æ–≤–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏;',
                   'üîç –ü–æ–∑–∏—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º –≤ –≤—ã–¥–∞—á–µ.',
                   '',
                   Bold('–û–°–û–ë–ï–ù–ù–û–°–¢–ò:'),
                   '',
                   'üêâ –†–∞–±–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è —Å–±–æ–µ–≤, –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä—ã WB –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç, –∞ –¥—Ä—É–≥–∏–µ –±–æ—Ç—ã –Ω–µ—Ä–≤–Ω–æ –º–æ–ª—á–∞—Ç;',
                   'üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∑–∞–∫–∞–∑–∞–º, –ø—Ä–æ–¥–∞–∂–∞–º, –≤–æ–∑–≤—Ä–∞—Ç–∞–º –∏ —à—Ç—Ä–∞—Ñ–∞–º;',
                   '‚ÜîÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ Wildberries;',
                   'üìë –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google —Ç–∞–±–ª–∏—Ü—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏;',
                   'üîï –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –ª–∏—à–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π;',
                   'üë®üèª‚Äçüíª –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞.',
                   '',
                   Bold('–ù–ï –ù–ê–†–£–®–ê–ï–¢ –û–§–ï–†–¢–£ WB:'),
                   '',
                   '‚úÖ –î–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ https://openapi.wb.ru.',
                   'üõ° –ü–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ.',
                   '',
                   'üî• –¢–µ–ø–µ—Ä—å –≤—Å—è –≥–æ—Ä—è—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤–∞—à–µ–≥–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞!',
                   sep='\n'
    )
    text_and_data = [
        ['üëâ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ', 'connect'],
    ]
    keyboard = InlineConstructor.create_kb(text_and_data)
    return text.as_html(), keyboard

def inline_kb_start_connect():
    text = as_line(Bold('üõ† –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï'), 
                       '',
                       '‚òëÔ∏è–ü–æ–¥–∫–ª—é—á–∞—è—Å—å –∫ –±–æ—Ç—É, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –Ω–∞—à—É –æ—Ñ–µ—Ä—Ç—É.',
                       '',
                       '1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API (—Å—Å—ã–ª–∫–∞).',
                       '2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω]. –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä {bot name}) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.',
                       '3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ [–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω], –∞ –∑–∞—Ç–µ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ.',
                       '',
                       'üìù –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:' ,
                       sep='\n')
    
    text_and_data = [
        ['üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ API', 'about_API'],
        ['ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', config.bot.support_url]
    ]
    button_type = ['callback_data', 'url']
    keyboard = InlineConstructor.create_kb(text_and_data=text_and_data, button_type=button_type)
    return text.as_html(), keyboard

def inline_kb_about_API():
    text = as_line(Bold('üîë API —Ç–æ–∫–µ–Ω (–∫–ª—é—á) Wildberries'),
                   '–ï—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ, —Ç–æ API-—Ç–æ–∫–µ–Ω ‚Äî —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Wildberries, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö, –ø—Ä–æ–¥–∞–∂–∞—Ö, –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö, –Ω–∞–ª–∏—á–∏—é –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö –∏ –¥—Ä—É–≥–∏–º –¥–∞–Ω–Ω—ã–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É. –î–∞–ª–µ–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É.', 
                   '',
                   'API-—Ç–æ–∫–µ–Ω ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–µ–º–∏ –∏–ª–∏ –∏–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ (–≤ —Ç–æ–º —á–∏—Å–ª–µ {botname}), –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –≤ —Ä–∞–±–æ—Ç–µ —Å Wildberries. ',
                   '',
                   Bold('–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ API:'),
                   '‚ú¥Ô∏è –° –ø–æ–º–æ—â—å—é API –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º, –∑–∞–∫–∞–∑–∞–º –∏ –ø–æ—Å—Ç–∞–≤–∫–∞–º. WB –∂–µ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–≤–æ–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–∞—ë—Ç –ª–∏—à—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. ',
                   '‚ú¥Ô∏è API –±–µ–∑–æ–ø–∞—Å–µ–Ω –∏ –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—Å–∫–ª—é—á–µ–Ω–∞. ',
                   '‚ú¥Ô∏è –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π API-—Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB, –∞ –∑–Ω–∞—á–∏—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º –¥–ª—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.',
                   sep='\n')
    
    reply_markup = InlineConstructor.create_kb([btn_back('connect')])
    return text.as_html(), reply_markup

def inline_kb_suc—Åess_start(seller_id : int):
    text = as_line(Bold('‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!'),
                   '',
                   '{bot name} —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–∞—Å ü§úüèª',
                   '',
                   '‚è≥ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ WB –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –±–æ—Ç —Å–æ–±–µ—Ä–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.',
                   '',
                   '–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–ª–∏—Ç—Å—è 1 —Å—É—Ç–∫–∏',
                   '',
                   'üöô –ï—Å–ª–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ø–æ —Å—Ö–µ–º–µ FBS (–ø—Ä–æ–¥–∞–∂–∞ —Å–æ —Å–∫–ª–∞–¥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞), –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π API —Ç–æ–∫–µ–Ω (—Ç–∏–ø —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π), —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ FBS –∑–∞–∫–∞–∑—ã.',
                   '',
                   'üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π, –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞.',
                   sep='\n'
                   )
    text_and_data = [
        ['–ü–æ–¥–∫–ª—é—á–∏—Ç—å FBS API —Ç–æ–∫–µ–Ω', 'add_fbs_api'],
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', f'add_employee_{seller_id}'],
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data)
    return text.as_html(), reply_markup

def inline_kb_unsuc—Åess_start():
    text = as_line(Bold('üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞'),
                   '',
                   '‚ùå–û—à–∏–±–∫–∞! API —Ç–æ–∫–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!',
                   '',
                   '–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:',
                   sep='\n'
                   )
    text_and_data = [
        btn_back('settings'),
        ['ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', config.bot.support_url]
    ]
    schema = [2]
    button_type = ['callback_data', 'url']
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema, button_type=button_type)
    return text.as_html(), reply_markup
                   
def inline_kb_add_employee(db_request, seller_id : int, tg_id : str):
    text_and_data = []
    employees = db_request.get_employee(seller_id=seller_id)
    employees_list = []
    current_user = db_request.get_employee(seller_id=seller_id, user_id=db_request.get_user(tg_id=tg_id).id)
    c = 1
    for employee in employees:
        is_admin = '(ü¶∏üèª‚Äç‚ôÇÔ∏è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω)' if employee.is_admin else ''
        user = db_request.get_user(id=employee.user.id)
        username = db_request.get_user(id=employee.user.id).username
        employee_tg_id = user.tg_id
        e_name = as_line(TextLink(f'{c}. {username} {is_admin}', url=f't.me/{username}')) if \
            username else as_line(TextLink(f'{c}. {employee_tg_id} {is_admin}', url=f'tg://user?id={employee_tg_id}'))
        employees_list.append(e_name)
        c += 1
        if not employee.is_admin and current_user.is_admin:
            name = user.username if user.username else user.tg_id
            text_and_data.append([f'–£–¥–∞–ª–∏—Ç—å {name}', f'del_employee_{seller_id}_{employee.id}'])

    text = as_line(Bold(f'üßëüèª‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ {len(employees)}'),
                   '', )
    for name in employees_list:
        text += name
    text2 = as_line('',
             '‚ÑπÔ∏è –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.',
             sep='\n')
    text += text2
    if current_user.is_admin:
        text_and_data += [['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', f'employee_link_{seller_id}']]
    text_and_data += [btn_back(f'settings_{seller_id}')]
    
    reply_markup = InlineConstructor.create_kb(text_and_data)
    return text.as_html(), reply_markup

def inline_kb_create_employee_link(seller_id : int, tg_id : int):
    text = as_line(Bold(f'üßëüèª‚Äçüíº –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'),
                   '',
                   '1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤–∞—à–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É:',
                   '',
                   f'{config.bot.bot_url}?start=addemployee_{tg_id}_{seller_id}',
                   '',
                   '2Ô∏è‚É£ –°–æ—Ç—Ä—É–¥–Ω–∏–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –≤ –±–æ—Ç –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É [–ó–∞–ø—É—Å—Ç–∏—Ç—å] (–Ω–∞ –∫–Ω–æ–ø–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–¥–ø–∏—Å—å "–°—Ç–∞—Ä—Ç" –∏–ª–∏ "–ù–∞—á–∞—Ç—å").', 
                   sep='\n')
    reply_markup = InlineConstructor.create_kb([btn_back(f'add_employee_{seller_id}')])
    return text.as_html(), reply_markup

def inline_kb_my(db_request, tg_id : str):
    sellers = db_request.get_seller(user_id=db_request.get_user(tg_id=tg_id).id)
    text = as_line(Bold(f'üê≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'), 
                   '',
                   f'¬∑ ID: {tg_id}',
                   '',
                   f'¬∑ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: {len(sellers)}',
                   sep='\n')
    text_and_data = [
        ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings'],
        ['üí∞ –ë–∞–ª–∞–Ω—Å', 'balan—Åe'],
        ['ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', config.bot.support_url],
        ['üìÑ –û—Ñ–µ—Ä—Ç–∞', config.bot.oferta],
    ]
    schema = [2, 1, 1]
    button_type = ['callback_data', 'url', 'url']
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema, button_type=button_type)
    return text.as_html(), reply_markup

def inline_kb_settings(db_request, tg_id : str):
    text = 'üìù –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:'
    text_and_data = []
    sellers = db_request.get_seller(user_id=db_request.get_user(tg_id=tg_id).id)
    for seller in sellers:
        text_and_data.append([seller.name, f'settings_{seller.id}'])
    text_and_data.append(['‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞', 'add_seller'])
    text_and_data.append(btn_back('my'))
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text, reply_markup

def inline_kb_add_seller():
    text = as_line(Bold(f'üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ '),
                   '',
                   '‚ÜîÔ∏è –ß—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å—Ä–∞–∑—É –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ WB, –¥–æ–±–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–∏–Ω API —Ç–æ–∫–µ–Ω.',
                   '',
                   '1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API (—Å—Å—ã–ª–∫–∞). ',
                   '',
                   '2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω]. –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∏–º—è –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä WbNinjaBot) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.',
                   '',
                   '3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ [–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω], –∞ –∑–∞—Ç–µ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ.',
                   '',
                   'üìù –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:',
                   sep='\n')
    
    reply_markup = InlineKeyboardBuilder()
    reply_markup.add(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='settings'))
    reply_markup.add(InlineKeyboardButton(text='ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=config.bot.support_url))
    return text.as_html(), reply_markup.as_markup()

def inline_kb_shop_settings(db_request, seller_id : int, tg_id : str):
    seller = db_request.get_seller(id=seller_id)
    employee = db_request.get_employee(seller_id=seller_id, user_id=db_request.get_user(tg_id=tg_id).id)
    tariff_date = (datetime.now().replace(day=1) + timedelta(days=32)).replace(day=1).strftime('%d.%m.%Y')
    is_orders = ['‚úÖ üõí –ó–∞–∫–∞–∑—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è', '‚úÖ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω'] if employee.is_orders else ['‚≠ïÔ∏è¬†üõí –ó–∞–∫–∞–∑—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è', '‚≠ïÔ∏è –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω']
    is_pay = ['‚úÖ üë§ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–≤—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞)', '‚úÖ –Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'] if employee.is_pay else ['‚≠ïÔ∏è¬†üë§ –í—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–≤—ã –Ω–µ¬†–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞)', '‚≠ïÔ∏è –Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']
    export = ['‚úÖ üìë –≠–∫—Å–ø–æ—Ä—Ç –≤ Google-—Ç–∞–±–ª–∏—Ü—ã –≤–∫–ª—é—á–µ–Ω (–ø–æ–¥—Ä–æ–±–Ω–µ–µ üëâüèª /export)', '‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Google-—Ç–∞–±–ª–∏—Ü—ã']  if seller.export else ['‚≠ïÔ∏è¬†üìë –≠–∫—Å–ø–æ—Ä—Ç –≤ Google-—Ç–∞–±–ª–∏—Ü—ã –≤—ã–∫–ª—é—á–µ–Ω (–ø–æ–¥—Ä–æ–±–Ω–µ–µ üëâüèª /export)', '‚≠ïÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –≤ Google (–≤–∫–ª—é—á–∏—Ç—å?)']
    is_key_words = ['‚úÖ üîç –ü–æ–∫–∞–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –∑–∞–∫–∞–∑–æ–≤ –≤–∫–ª—é—á–µ–Ω', '‚úÖ –ü–æ–∫–∞–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤']  if employee.is_key_words else ['‚≠ïÔ∏è¬†üîç¬†–ü–æ–∫–∞–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –∑–∞–∫–∞–∑–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω', '‚≠ïÔ∏è –ü–æ–∫–∞–∑ –∫–ª—é—á.—Å–ª–æ–≤ (–≤–∫–ª—é—á–∏—Ç—å?)']
    dragon = ['‚úÖ üêâ –†–µ–∂–∏–º ¬´–î—Ä–∞–∫–æ–Ω¬ª –≤–∫–ª—é—á–µ–Ω (–ø–æ–¥—Ä–æ–±–Ω–µ–µ üëâüèª /dragon)', '‚úÖ –†–µ–∂–∏–º ¬´–î—Ä–∞–∫–æ–Ω¬ª']  if seller.dragon else ['‚≠ïÔ∏è¬†üêâ –†–µ–∂–∏–º "–î—Ä–∞–∫–æ–Ω" –≤—ã–∫–ª—é—á–µ–Ω (–ø–æ–¥—Ä–æ–±–Ω–µ–µ üëâüèª /dragon)', '‚≠ïÔ∏è –†–µ–∂–∏–º ¬´–î—Ä–∞–∫–æ–Ω¬ª (–≤–∫–ª—é—á–∏—Ç—å?)']
    
    text = as_line(Bold(f'ü•ù {seller.name}'),
                   f'üí∞ –¢–∞—Ä–∏—Ñ: {seller.tariff}‚ÇΩ / –º–µ—Å',
                   f'‚è± –†–∞—Å—á—ë—Ç —Ç–∞—Ä–∏—Ñ–∞: {tariff_date}',
                   '.....',
                   '',
                   is_orders[0],
                   '',
                   is_pay[0],
                   '',
                   export[0],
                   '',
                   is_key_words[0],
                   '',
                   dragon[0],
                   sep='\n'
    )
    article_type = 'üÜî –ê—Ä—Ç–∏–∫—É–ª —Å—Å—ã–ª–∫–æ–π' if employee.is_article else 'üÜî –ê—Ä—Ç–∏–∫—É–ª —Ç–µ–∫—Å—Ç–æ–º + —Å—Å—ã–ª–∫–∞'
    text_and_data = []
    text_and_data.append([is_orders[1], f'settings_isorders_{seller_id}'])
    text_and_data.append([is_pay[1], f'settings_ispay_{seller_id}'])
    text_and_data.append([export[1], f'settings_export_{seller_id}'])
    text_and_data.append([is_key_words[1], f'settings_iskeywords_{seller_id}'])
    text_and_data.append([dragon[1], f'settings_dragon_{seller_id}'])
    text_and_data.append([article_type, f'settings_articletype_{seller_id}'])
    text_and_data.append([f'üì¶ –†–µ–∑–µ—Ä–≤ —Å–∫–ª–∞–¥–∞ {employee.stock_reserve} –¥–Ω', f'settings_stockreserve_{seller_id}'])
    text_and_data.append(['üîë API —Ç–æ–∫–µ–Ω FBO (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)', f'apifbo_{seller_id}'])
    text_and_data.append(['üîë API —Ç–æ–∫–µ–Ω FBS (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)', f'apifbs_{seller_id}'])
    text_and_data.append(['üßë‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', f'add_employee_{seller_id}'])
    text_and_data.append(['üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', f'notifications_{seller_id}'])
    text_and_data.append(['‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', f'delapifbo_{seller_id}'])
    text_and_data.append(btn_back('settings'))
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_stockreserve(db_request, seller_id : int, tg_id : str):
    employee = db_request.get_employee(seller_id=seller_id, user_id=db_request.get_user(tg_id=tg_id).id)
    text = as_line(Bold('üì¶ –†–µ–∑–µ—Ä–≤ —Å–∫–ª–∞–¥–∞ '),
                   '',
                   '{bot_name} –ø–æ–∫–∞–∂–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–∫–ª–∞–¥ (–Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ —Ö–≤–∞—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π –¥–∏–Ω–∞–º–∏–∫–µ –ø—Ä–æ–¥–∞–∂).',
                   '',
                   f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {employee.stock_reserve} –¥–Ω.',
                   '',
                   'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–æ—Ç 3 –¥–æ 60):',
                   sep='\n'
    )
    reply_markup = InlineConstructor.create_kb(text_and_data=[btn_back(f'settings_{seller_id}')])
    return text.as_html(), reply_markup

def inline_kb_apifbo(db_request, seller_id : int):
    seller = db_request.get_seller(id=seller_id)
    text = as_line(Bold('üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–º'),
                   '',
                   f'ü•ù {seller.name}',
                   '',
                   'üëáüèª –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                   sep='\n'
    )
    text_and_data = [
        ['–ó–∞–º–µ–Ω–∏—Ç—å API —Ç–æ–∫–µ–Ω FBO (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)', f'changeapifbo_{seller_id}'],
        ['–£–¥–∞–ª–∏—Ç—å API —Ç–æ–∫–µ–Ω FBO (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)', f'delapifbo_{seller_id}'],
        btn_back(f'settings_{seller_id}')
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_change_apifbo(db_request, seller_id : int):
    seller = db_request.get_seller(id=seller_id)
    text = as_line(Bold('üîÑ –ó–∞–º–µ–Ω–∞ API —Ç–æ–∫–µ–Ω–∞ FBO (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)'),
                   '',
                   f'ü•ù {seller.name}',
                   '',
                   '–ó–∞–º–µ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –µ—Å–ª–∏ API —Ç–æ–∫–µ–Ω FBO (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) –±—ã–ª —É–¥–∞–ª—ë–Ω –≤ –∫–∞–±–∏–Ω–µ—Ç–µ Wildberries –∏–ª–∏ –≤—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Ç–∏–ø–∞ –∫–ª—é—á–∞ –Ω–∞ –Ω–æ–≤—ã–π. ',
                   '',
                   '1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API (—Å—Å—ã–ª–∫–∞). ',
                   '',
                   '2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω]. –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä {bot_name}}) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.',
                   '',
                   '3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ [–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω], –∞ –∑–∞—Ç–µ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ.',
                   '',
                   'üìù –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:',
                   sep='\n'
    )
    reply_markup = InlineKeyboardBuilder()
    reply_markup.add(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'settings_{seller_id}'))
    reply_markup.add(InlineKeyboardButton(text='ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=config.bot.support_url))
    return text.as_html(), reply_markup.as_markup()

def inline_kb_del_apifbo(db_request, seller_id : int):
    seller = db_request.get_seller(id=seller_id)
    text = as_line(Bold('üóë –£–¥–∞–ª–µ–Ω–∏–µ  '),
                   '',
                   '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ –±–æ—Ç–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫:',
                   f'ü•ù {seller.name}',
                   '',
                   '‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –æ—Ç—á—ë—Ç–∞—Ö –±–æ—Ç–∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.',
                   sep='\n'
    )
    text_and_data = [
        btn_back(f'apifbo_{seller_id}'),
        ['–£–¥–∞–ª–∏—Ç—å', f'delapifbo_accept_{seller_id}'],
    ]
    schema = [2]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema)
    return text.as_html(), reply_markup

def inline_kb_apifbs(db_request, seller_id : int):
    seller = db_request.get_seller(id=seller_id)
    fbs_token = seller.token_fbs if seller.token_fbs else '‚ö†Ô∏è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    text = as_line(Bold('üîë API —Ç–æ–∫–µ–Ω FBS (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)  '),
                   '',
                   f'ü•ù {seller.name}',
                   '',
                   '–ï—Å–ª–∏ –≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ø–æ —Å—Ö–µ–º–µ FBS (–ø—Ä–æ–¥–∞–∂–∞ —Å–æ —Å–∫–ª–∞–¥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π API —Ç–æ–∫–µ–Ω (—Ç–∏–ø —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π), —á—Ç–æ–±—ã WbNinjaBot –º–æ–≥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã.',
                   '',
                   '(–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø—Ä–∏ —ç—Ç–æ–º –ø–µ—Ä–≤—ã–π API —Ç–æ–∫–µ–Ω FBO (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ–≥–æ —É–¥–∞–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.)',
                   '',
                   '1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API (—Å—Å—ã–ª–∫–∞). ',
                   '',
                   '2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω]. –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä {bot_name}) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π.',
                   '',
                   '3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ [–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω], –∞ –∑–∞—Ç–µ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ.',
                   '',
                   f'–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: {fbs_token}',
                   '',
                   'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:',
                   sep='\n'
    )
    text_and_data = []

    if seller.token_fbs:
        text_and_data.append(['–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω', f'changeapifbs_accept_{seller_id}'])
        text_and_data.append(['–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω', f'changeapifbs_accept_{seller_id}'])

    text_and_data.append(btn_back(f'settings_{seller_id}'))

    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_notifications(db_request, seller_id : int):
    seller = db_request.get_seller(id=seller_id)
    text = as_line(Bold('üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'),
                   '',
                   f'ü•ù {seller.name}',
                   sep='\n'
    )
    text_and_data = [
        ['–ó–∞–∫–∞–∑—ã', f'notiforders_{seller_id}'],
        ['–í—ã–∫—É–ø—ã', f'notifbuyout_{seller_id}'],
        ['–û—Ç–º–µ–Ω—ã / –í–æ–∑–≤—Ä–∞—Ç—ã', f'notifcancel_{seller_id}'],
        btn_back(f'settings_{seller_id}')
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_notiforders(db_request, employee_id : int, seller_id : int, button : str):
    text = Bold('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑–∞–º')
    text_and_data = [
        ['–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å—ë', f'notiforders_{seller_id}_all'],
        ['–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è', f'notiforders_{seller_id}_1'],
        ['–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è', f'notiforders_{seller_id}_2'],
        ['–ï—Å–ª–∏ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è', f'notiforders_{seller_id}_3'],
        ['–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º', f'notiforders_{seller_id}_4'],
        ['–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å—ë', f'notiforders_{seller_id}_none'],
        btn_back(f'notifications_{seller_id}')
    ]
    employee = db_request.get_employee(id=employee_id)

    if all([employee.order_notif_end, employee.order_notif_ending, employee.order_notif_commission, employee.order_notif_favorites]) \
        and button == 'all':
        text_and_data[0][0] = 'üëâ ' + text_and_data[0][0]
        text_and_data[1][1] = f'notiforders_{seller_id}_all_1'
        text_and_data[2][1] = f'notiforders_{seller_id}_all_2'
        text_and_data[3][1] = f'notiforders_{seller_id}_all_3'
        text_and_data[4][1] = f'notiforders_{seller_id}_all_4'

    elif all([not employee.order_notif_end, not employee.order_notif_ending, not employee.order_notif_commission, not employee.order_notif_favorites]):
        text_and_data[5][0] = 'üëâ ' + text_and_data[5][0]
    else:
        if employee.order_notif_end:
            text_and_data[1][0] = 'üëâ ' + text_and_data[1][0]
        if employee.order_notif_ending:
            text_and_data[2][0] = 'üëâ ' + text_and_data[2][0]
        if employee.order_notif_commission:
            text_and_data[3][0] = 'üëâ ' + text_and_data[3][0]
        if employee.order_notif_favorites:
            text_and_data[4][0] = 'üëâ ' + text_and_data[4][0]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_notifbuyout(db_request, employee_id : int, seller_id : int, button : str):
    text = Bold('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—ã–∫—É–ø–∞–º')
    text_and_data = [
        ['–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å—ë', f'notifbuyout_{seller_id}_all'],
        ['–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è', f'notifbuyout_{seller_id}_1'],
        ['–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è', f'notifbuyout_{seller_id}_2'],
        ['–ï—Å–ª–∏ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è', f'notifbuyout_{seller_id}_3'],
        ['–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º', f'notifbuyout_{seller_id}_4'],
        ['–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å—ë', f'notifbuyout_{seller_id}_none'],
        btn_back(f'notifications_{seller_id}')
    ]
    employee = db_request.get_employee(id=employee_id)
    if all([employee.buyout_notif_end, employee.buyout_notif_ending, employee.buyout_notif_commission, employee.buyout_notif_favorites]) \
        and button == 'all':
        text_and_data[0][0] = 'üëâ ' + text_and_data[0][0]
        text_and_data[1][1] = f'notifbuyout_{seller_id}_all_1'
        text_and_data[2][1] = f'notifbuyout_{seller_id}_all_2'
        text_and_data[3][1] = f'notifbuyout_{seller_id}_all_3'
        text_and_data[4][1] = f'notifbuyout_{seller_id}_all_4'
    elif all([not employee.buyout_notif_end, not employee.buyout_notif_ending, not employee.buyout_notif_commission, not employee.buyout_notif_favorites]):
        text_and_data[5][0] = 'üëâ ' + text_and_data[5][0]
    else:
        if employee.buyout_notif_end:
            text_and_data[1][0] = 'üëâ ' + text_and_data[1][0]
        if employee.buyout_notif_ending:
            text_and_data[2][0] = 'üëâ ' + text_and_data[2][0]
        if employee.buyout_notif_commission:
            text_and_data[3][0] = 'üëâ ' + text_and_data[3][0]
        if employee.buyout_notif_favorites:
            text_and_data[4][0] = 'üëâ ' + text_and_data[4][0]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_notifcancel(db_request, employee_id : int, seller_id : int):
    text = Bold('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –æ—Ç–º–µ–Ω–∞–º –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞–º')
    text_and_data = [
        ['–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å—ë', f'notifcancel_{seller_id}_1'],
        ['–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å—ë', f'notifcancel_{seller_id}_2'],
        btn_back(f'notifications_{seller_id}')
    ]
    employee = db_request.get_employee(id=employee_id)
    if employee.cancel_notif:
        text_and_data[0][0] = 'üëâ ' + text_and_data[0][0]
    else:
        text_and_data[1][0] = 'üëâ ' + text_and_data[1][0]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_balance(db_request, tg_id : str):
    user = db_request.get_user(tg_id=tg_id)
    sellers = db_request.get_seller(user_id=user.id)
    tariff = sum([s.tariff for s in sellers])
    text = as_line(Bold(f'üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ'),
                   '',
                   f'¬∑ –í–∞—à —Ç–∞—Ä–∏—Ñ: {tariff}‚ÇΩ / –º–µ—Å',
                   f'¬∑ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: {len(sellers)}',
                   '',
                   'üë®‚Äçüíºüë©üèª‚Äçüíº –ï—Å–ª–∏ –∫ –≤–∞—à–µ–º—É API-–∫–ª—é—á—É –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –∫—Ç–æ-—Ç–æ –æ–¥–∏–Ω (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º), –∞ –ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ.',
                   '',
                   'üîí –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –í–∞—à–µ–º—É —Å–æ–≥–ª–∞—Å–∏—é.',
                   '',
                   'üõ° –î–µ–Ω—å–≥–∏ —Å –≤–∞—à–∏—Ö –∫–∞—Ä—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è.',
                   '',
                   '‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ üëâüèª /tariff',
                   sep='\n'
    )
    
    text_and_data = [
        [f'+ {tariff}‚ÇΩ', f'transaction_{tariff}']
    ]
    for i in [1, 3, 5, 10]:
        if i * 1000 > tariff:
            text_and_data.append([f'+ {i * 1000}‚ÇΩ', f'transaction_{i * 1000}'])
    schema = [1 for _ in text_and_data]
    button_type = ['callback_data' for _ in text_and_data]
    text_and_data.append(['–í–≤–µ—Å—Ç–∏ –∫—É–ø–æ–Ω', 'coupon'])
    text_and_data.append(['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è', 'credit'])
    text_and_data.append(['–°–ø–∏—Å–∞–Ω–∏—è', 'debit'])
    text_and_data.append(['ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', config.bot.support_url])
    text_and_data.append(btn_back('my'))
    schema += [1, 2, 1, 1]
    button_type += ['callback_data', 'callback_data', 'url', 'callback_data']
    
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema, button_type=button_type)
    return text.as_html(), reply_markup
    
def inline_kb_payment(sum : int, payment_link : str):
    text = as_line(Bold(f'üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {sum}‚ÇΩ'),
                   '',
                   'üîí –û–ø–ª–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–æ–ø–∞—Å–Ω–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.',
                   '',
                   'üá∑üá∫ –û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –∫–∞—Ä—Ç–æ–π –ª—é–±–æ–≥–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –±–∞–Ω–∫–∞ (–°–±–µ—Ä, –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –ê–ª—å—Ñ–∞–±–∞–Ω–∫ –∏ —Ç.–¥.), –∞ —Ç–∞–∫–∂–µ Tinkoff Pay, –°–ë–ü, –ØPAY.',
                   '',
                   'üá∞üáøüáßüáæüá∫üáøüá∞üá¨ –û–ø–ª–∞—Ç–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @SUPPORT!!!',
                   '',
                   'üïî –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –ø–æ—Å—Ç—É–ø–∞—é—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.',
                   '',
                   'üí™üèª –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–∏—Å–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ).',
                   sep='\n'
    )
    text_and_data = [
        ['–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', 'https://www.google.ru'],
        btn_back('balan—Åe')
    ]
    button_type = ['url', 'callback_data']
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, button_type=button_type)
    return text.as_html(), reply_markup

def inline_kb_credit(db_request, tg_id : str):
    user = db_request.get_user(tg_id=tg_id)
    transactions = db_request.get_transaction(user_id=user.id)
    text = as_line(Bold('üßæ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è'),
                   '',
                   sep='\n'
    )
    if not transactions:
        text += '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ'
    else:
        for t in transactions:
            if t.type:
                bill = t.bill_link if t.bill_link.startswith('–ö—É–ø–æ–Ω') else TextLink(f'‚Ññ{t.bill_number}', url=t.bill_link)
                text += f'–î–∞—Ç–∞:¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†{t.datetime.strftime("%d.%m.%Y %H:%M")}\n–ù–æ–º–µ—Ä:¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†{t.id}\n–ó–∞—á–∏—Å–ª–µ–Ω–æ:¬†¬†¬†¬†¬†¬†¬†{t.sum}‚ÇΩ\n–ö–∞—Å—Å–æ–≤—ã–π —á–µ–∫:¬†¬†{bill}\n\n'
    text_and_data = [
        btn_back('balan—Åe')
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_debit(db_request, tg_id : str):
    user = db_request.get_user(tg_id=tg_id)
    transactions = db_request.get_transaction(user_id=user.id)
    text = as_line(Bold('üßæ –°–ø–∏—Å–∞–Ω–∏—è'),
                   '',
                   sep='\n'
    )
    if not transactions:
        text += '–°–ø–∏—Å–∞–Ω–∏—è –µ—â–µ –Ω–µ –±—ã–ª–æ'
    else:
        for t in transactions:
            if not t.type:
                text += f"¬∑ {t.datetime.strftime('%d.%m.%Y %H:%M:%S')} - {t.sum}‚ÇΩ"
    text_and_data = [
        btn_back('balan—Åe')
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_coupon():
    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞:'
    reply_markup = InlineConstructor.create_kb(text_and_data=[btn_back('balan—Åe')])
    return text, reply_markup

def inline_kb_tariff():
    text = as_line(Bold('üí∞ –¢–∞—Ä–∏—Ñ—ã {bot_name}'),
                   '',
                   '–¢–µ—Å—Ç–æ–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 14 –¥–Ω–µ–π (—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞).',
                   '',
                   '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–∞ –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –∑–∞ 1 –º–µ—Å—è—Ü. –û–ø–ª–∞—Ç—É –±–æ—Ç —Å–ø–∏—Å—ã–≤–∞–µ—Ç —Å –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ –∑–∞ –¥–µ–Ω—å —Ä–∞–±–æ—Ç—ã. ',
                   '',
                   '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 30 –¥–Ω–µ–π –¥–æ —Ä–∞—Å—á–µ—Ç–Ω–æ–π –¥–∞—Ç—ã (–ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –≤ —Ä–∞—Å—á–µ—Ç–Ω—ã–π –¥–µ–Ω—å, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥–∞—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞). ',
                   '',
                   '–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ –º–µ—Å—è—Ü —Å–æ—Å—Ç–∞–≤–∏—Ç:',
                   '',
                   '–û—Ç 1 –¥–æ 300 = 290‚ÇΩ / –º–µ—Å',
                   '', 
                   '–û—Ç 301 –¥–æ 1000 = 490‚ÇΩ / –º–µ—Å', 
                   '', 
                   '–û—Ç 1001 –¥–æ 3000 = 790‚ÇΩ / –º–µ—Å', 
                   '', 
                   '–û—Ç 3001 –¥–æ 10 000 = 1090‚ÇΩ / –º–µ—Å', 
                   '', 
                   '–û—Ç 10 001 –¥–æ 100 000 = 1390‚ÇΩ / –º–µ—Å', 
                   '', 
                   '–û—Ç 100 001 = 1690‚ÇΩ / –º–µ—Å ', 
                   '(+300‚ÇΩ / –º–µ—Å –∑–∞ –∫–∞–∂–¥—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 100 000 –ø—Ä–æ–¥–∞–∂). ', 
                   '', 
                   '–ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–æ—Ç—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ (API-–∫–ª—é—á–µ–π) —Ç–∞—Ä–∏—Ñ—ã —Å—É–º–º–∏—Ä—É—é—Ç—Å—è.', 
                   '', 
                   '–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', 
                   '', 
                   '‚úÖ üë®‚Äçüíºüë©üèª‚Äçüíº –ó–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫ –≤–∞—à–∏–º API-–∫–ª—é—á–∞–º, –æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è. ', 
                   '', 
                   '‚úÖ üêâ –ó–∞–∫–∞–∑—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ —Ä–µ–∂–∏–º–µ –î—Ä–∞–∫–æ–Ω–∞, –Ω–µ —Ç–∞—Ä–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è. ', 
                   '', 
                   '‚úÖ üîí –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –í–∞—à–µ–º—É —Å–æ–≥–ª–∞—Å–∏—é.', 
                   '', 
                   '‚úÖ üõ° –î–µ–Ω—å–≥–∏ —Å –∫–∞—Ä—Ç—ã –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è.', 
                   '', 
                   sep='\n'
    )

    text += as_line(f'üìπ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å üëâüèª',
                    TextLink("–≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url=config.bot.videoinstruction)
    )

    text += as_line('',
                    '‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ üëâüèª /balance',
                    sep='\n'
    )
    text_and_data = [
        ['–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', 'balan—Åe']
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup
                   
def inline_kb_news(db_request, news_id : int = None, tg_id : str = None):
    text = '<b>–ù–û–í–û–°–¢–ò</b>\n\n'
    news_ids = [n.id for n in db_request.get_news()]
    schema = None
    button_type = None
    if news_ids:
        current_news = db_request.get_news(id=news_id) if news_id else db_request.get_news(id=news_ids[-1])
        text += current_news.publication_date.strftime('%d.%m.%Y\n')
        text += current_news.text
        text_and_data = []
        if news_id == news_ids[-1] and len(news_ids) == 1:
            text_and_data = [['ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', config.bot.support_url]]
        elif news_id == news_ids[-1] and len(news_ids) > 1:
            text_and_data.append(['–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', f'news_{news_ids[-2]}'])
        elif not news_id and len(news_ids) == 1:
            text_and_data = [['ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', config.bot.support_url]]
        elif news_id == news_ids[0] and len(news_ids) > 1:
            text_and_data.append(['‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', f'news_{news_ids[1]}'])
        else:
            next_id = news_ids[news_ids.index(news_id) - 1]
            prev_id = news_ids[news_ids.index(news_id) + 1]
            text_and_data.append(['‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', f'news_{prev_id}'])
            text_and_data.append(['–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', f'news_{next_id}'])
            schema = [2]
    else:
        text += '–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç...'
        text_and_data = [['ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', config.bot.support_url]]
        button_type = ['url']

    if db_request.get_user(tg_id=tg_id).is_admin:
        text_and_data.append(['–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å', f'addnews_{news_id}'])
        print(news_ids)
        if news_ids:
            news_id = news_ids[0] if not news_id else news_id
            id = news_ids[news_ids.index(news_id) - 1] if news_id != news_ids[0] and news_id != None else news_ids[0] if news_id != news_ids[0] else news_ids[1] if len(news_ids) > 1 else None
            text_and_data.append(['–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å', f'delnews_{id}_{news_id}'])
        if schema:
            schema += [1, 1]
        if button_type:
            button_type += ['callback_data', 'callback_data']
    
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema, button_type=button_type)
    return text, reply_markup

def inline_kb_addnews(news_id):
    text = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏.\n\n–ß—Ç–æ–±—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML —Ä–∞–∑–º–µ—Ç–∫—É.'
    reply_markup = InlineConstructor.create_kb(text_and_data=[btn_back(f'news_{news_id}')])
    return text, reply_markup
