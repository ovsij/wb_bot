from datetime import date, datetime, timedelta

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.formatting import *
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.config import load_config
from bot.database.enum import *
from bot.keyboards import InlineConstructor, btn_back

config = load_config('.env')

def inline_kb_start():
    text = as_line('ü§úüèª {bot_name} - —ç—Ç–æ –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ Wildberries. ',
                   '',
                   Bold('–ë–û–¢ –ü–û–ö–ê–ñ–ï–¢:  '),
                   '',
                   'üõí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö;',
                   '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∫—É–ø–∞—Ö;',
                   '‚Ü© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–∞—Ö;',
                   'üíº –§–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–æ –∑–∞–∫–∞–∑—É;',
                   'üíé –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∞—Ä—Ç–∏–∫—É–ª—É;',
                   'üåê –†–µ–≥–∏–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏;',
                   'üì¶ –†–µ–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–≤–∞—Ç–∏—Ç —Ä–µ–∑–µ—Ä–≤–∞;',
                   'üöó –°–æ–æ–±—â–∏—Ç –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–æ–≤–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏;',
                   'üîç –ü–æ–∑–∏—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º –≤ –≤—ã–¥–∞—á–µ.',
                   '',
                   Bold('–û–°–û–ë–ï–ù–ù–û–°–¢–ò:'),
                   '',
                   'üêâ –†–∞–±–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è —Å–±–æ–µ–≤, –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä—ã WB –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç, –∞ –¥—Ä—É–≥–∏–µ –±–æ—Ç—ã –Ω–µ—Ä–≤–Ω–æ –º–æ–ª—á–∞—Ç;',
                   'üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∑–∞–∫–∞–∑–∞–º, –ø—Ä–æ–¥–∞–∂–∞–º, –≤–æ–∑–≤—Ä–∞—Ç–∞–º –∏ —à—Ç—Ä–∞—Ñ–∞–º;',
                   '‚ÜîÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ Wildberries;',
                   'üìë –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google —Ç–∞–±–ª–∏—Ü—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏;',
                   'üîï –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –ª–∏—à–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π;',
                   'üë®üèª‚Äçüíª –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞.',
                   '',
                   Bold('–ù–ï –ù–ê–†–£–®–ê–ï–¢ –û–§–ï–†–¢–£ WB:'),
                   '',
                   '‚úÖ –î–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ https://openapi.wb.ru.',
                   'üõ° –ü–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ.',
                   '',
                   'üî• –¢–µ–ø–µ—Ä—å –≤—Å—è –≥–æ—Ä—è—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤–∞—à–µ–≥–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞!',
                   sep='\n'
    )
    text_and_data = [
        ['üëâ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ', 'connect'],
    ]
    keyboard = InlineConstructor.create_kb(text_and_data)
    return text.as_html(), keyboard

def inline_kb_start_connect():
    text = as_line(Bold('üõ† –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï'), 
                       '',
                       '‚òëÔ∏è–ü–æ–¥–∫–ª—é—á–∞—è—Å—å –∫ –±–æ—Ç—É, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –Ω–∞—à—É –æ—Ñ–µ—Ä—Ç—É.',
                       '',
                       '1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API (—Å—Å—ã–ª–∫–∞).',
                       '2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω]. –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä {bot name}) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.',
                       '3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ [–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω], –∞ –∑–∞—Ç–µ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ.',
                       '',
                       'üìù –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:' ,
                       sep='\n')
    
    text_and_data = [
        ['üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ API', 'about_API'],
        ['ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', config.bot.support_url]
    ]
    button_type = ['callback_data', 'url']
    keyboard = InlineConstructor.create_kb(text_and_data=text_and_data, button_type=button_type)
    return text.as_html(), keyboard

def inline_kb_about_API():
    text = as_line(Bold('üîë API —Ç–æ–∫–µ–Ω (–∫–ª—é—á) Wildberries'),
                   '–ï—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ, —Ç–æ API-—Ç–æ–∫–µ–Ω ‚Äî —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Wildberries, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö, –ø—Ä–æ–¥–∞–∂–∞—Ö, –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö, –Ω–∞–ª–∏—á–∏—é –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö –∏ –¥—Ä—É–≥–∏–º –¥–∞–Ω–Ω—ã–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É. –î–∞–ª–µ–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É.', 
                   '',
                   'API-—Ç–æ–∫–µ–Ω ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–µ–º–∏ –∏–ª–∏ –∏–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ (–≤ —Ç–æ–º —á–∏—Å–ª–µ {botname}), –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –≤ —Ä–∞–±–æ—Ç–µ —Å Wildberries. ',
                   '',
                   Bold('–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ API:'),
                   '‚ú¥Ô∏è –° –ø–æ–º–æ—â—å—é API –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º, –∑–∞–∫–∞–∑–∞–º –∏ –ø–æ—Å—Ç–∞–≤–∫–∞–º. WB –∂–µ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–≤–æ–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–∞—ë—Ç –ª–∏—à—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. ',
                   '‚ú¥Ô∏è API –±–µ–∑–æ–ø–∞—Å–µ–Ω –∏ –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—Å–∫–ª—é—á–µ–Ω–∞. ',
                   '‚ú¥Ô∏è –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π API-—Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB, –∞ –∑–Ω–∞—á–∏—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º –¥–ª—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.',
                   sep='\n')
    
    reply_markup = InlineConstructor.create_kb([btn_back('connect')])
    return text.as_html(), reply_markup

def inline_kb_suc—Åess_start(seller_id : int):
    text = as_line(Bold('‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!'),
                   '',
                   '{bot name} —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–∞—Å ü§úüèª',
                   '',
                   '‚è≥ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ WB –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –±–æ—Ç —Å–æ–±–µ—Ä–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.',
                   '',
                   '–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–ª–∏—Ç—Å—è 1 —Å—É—Ç–∫–∏',
                   '',
                   'üöô –ï—Å–ª–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ø–æ —Å—Ö–µ–º–µ FBS (–ø—Ä–æ–¥–∞–∂–∞ —Å–æ —Å–∫–ª–∞–¥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞), –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π API —Ç–æ–∫–µ–Ω (—Ç–∏–ø —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π), —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ FBS –∑–∞–∫–∞–∑—ã.',
                   '',
                   'üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π, –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞.',
                   sep='\n'
                   )
    text_and_data = [
        ['–ü–æ–¥–∫–ª—é—á–∏—Ç—å FBS API —Ç–æ–∫–µ–Ω', 'add_fbs_api'],
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', f'add_employee_{seller_id}'],
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data)
    return text.as_html(), reply_markup

def inline_kb_unsuc—Åess_start():
    text = as_line(Bold('üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞'),
                   '',
                   '‚ùå–û—à–∏–±–∫–∞! API —Ç–æ–∫–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!',
                   '',
                   '–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:',
                   sep='\n'
                   )
    text_and_data = [
        btn_back('settings'),
        ['ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', config.bot.support_url]
    ]
    schema = [2]
    button_type = ['callback_data', 'url']
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema, button_type=button_type)
    return text.as_html(), reply_markup
                   
def inline_kb_add_employee(db_request, seller_id : int, tg_id : str):
    text_and_data = []
    employees = db_request.get_employee(seller_id=seller_id)
    employees_list = []
    current_user = db_request.get_employee(seller_id=seller_id, user_id=db_request.get_user(tg_id=tg_id).id)
    c = 1
    for employee in employees:
        is_admin = '(ü¶∏üèª‚Äç‚ôÇÔ∏è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω)' if employee.is_admin else ''
        user = db_request.get_user(id=employee.user.id)
        username = db_request.get_user(id=employee.user.id).username
        employee_tg_id = user.tg_id
        e_name = as_line(TextLink(f'{c}. {username} {is_admin}', url=f't.me/{username}')) if \
            username else as_line(TextLink(f'{c}. {employee_tg_id} {is_admin}', url=f'tg://user?id={employee_tg_id}'))
        employees_list.append(e_name)
        c += 1
        if not employee.is_admin and current_user.is_admin:
            name = user.username if user.username else user.tg_id
            text_and_data.append([f'–£–¥–∞–ª–∏—Ç—å {name}', f'del_employee_{seller_id}_{employee.id}'])

    text = as_line(Bold(f'üßëüèª‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ {len(employees)}'),
                   '', )
    for name in employees_list:
        text += name
    text2 = as_line('',
             '‚ÑπÔ∏è –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.',
             sep='\n')
    text += text2
    if current_user.is_admin:
        text_and_data += [['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', f'employee_link_{seller_id}']]
    text_and_data += [btn_back(f'settings_{seller_id}')]
    
    reply_markup = InlineConstructor.create_kb(text_and_data)
    return text.as_html(), reply_markup

def inline_kb_create_employee_link(seller_id : int, tg_id : int):
    text = as_line(Bold(f'üßëüèª‚Äçüíº –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'),
                   '',
                   '1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤–∞—à–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É:',
                   '',
                   f'{config.bot.bot_url}?start=addemployee_{tg_id}_{seller_id}',
                   '',
                   '2Ô∏è‚É£ –°–æ—Ç—Ä—É–¥–Ω–∏–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –≤ –±–æ—Ç –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É [–ó–∞–ø—É—Å—Ç–∏—Ç—å] (–Ω–∞ –∫–Ω–æ–ø–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–¥–ø–∏—Å—å "–°—Ç–∞—Ä—Ç" –∏–ª–∏ "–ù–∞—á–∞—Ç—å").', 
                   sep='\n')
    reply_markup = InlineConstructor.create_kb([btn_back(f'add_employee_{seller_id}')])
    return text.as_html(), reply_markup

def inline_kb_my(db_request, tg_id : str):
    sellers = db_request.get_seller(user_id=db_request.get_user(tg_id=tg_id).id)
    text = as_line(Bold(f'üê≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'), 
                   '',
                   f'¬∑ ID: {tg_id}',
                   '',
                   f'¬∑ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: {len(sellers)}',
                   sep='\n')
    text_and_data = [
        ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings'],
        ['üí∞ –ë–∞–ª–∞–Ω—Å', 'balan—Åe'],
        ['ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', config.bot.support_url],
        ['üìÑ –û—Ñ–µ—Ä—Ç–∞', config.bot.oferta],
    ]
    schema = [2, 1, 1]
    button_type = ['callback_data', 'url', 'url']
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema, button_type=button_type)
    return text.as_html(), reply_markup

def inline_kb_settings(db_request, tg_id : str):
    text = 'üìù –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:'
    text_and_data = []
    sellers = db_request.get_seller(user_id=db_request.get_user(tg_id=tg_id).id)
    for seller in sellers:
        text_and_data.append([seller.name, f'settings_{seller.id}'])
    text_and_data.append(['‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞', 'add_seller'])
    text_and_data.append(btn_back('my'))
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text, reply_markup

def inline_kb_add_seller():
    text = as_line(Bold(f'üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ '),
                   '',
                   '‚ÜîÔ∏è –ß—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å—Ä–∞–∑—É –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ WB, –¥–æ–±–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–∏–Ω API —Ç–æ–∫–µ–Ω.',
                   '',
                   '1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API (—Å—Å—ã–ª–∫–∞). ',
                   '',
                   '2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω]. –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∏–º—è –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä WbNinjaBot) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.',
                   '',
                   '3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ [–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω], –∞ –∑–∞—Ç–µ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ.',
                   '',
                   'üìù –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:',
                   sep='\n')
    
    reply_markup = InlineKeyboardBuilder()
    reply_markup.add(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='settings'))
    reply_markup.add(InlineKeyboardButton(text='ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=config.bot.support_url))
    return text.as_html(), reply_markup.as_markup()

def inline_kb_shop_settings(db_request, seller_id : int, tg_id : str):
    seller = db_request.get_seller(id=seller_id)
    employee = db_request.get_employee(seller_id=seller_id, user_id=db_request.get_user(tg_id=tg_id).id)
    tariff_date = (datetime.now().replace(day=1) + timedelta(days=32)).replace(day=1).strftime('%d.%m.%Y')
    is_orders = ['‚úÖ üõí –ó–∞–∫–∞–∑—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è', '‚úÖ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω'] if employee.is_orders else ['‚≠ïÔ∏è¬†üõí –ó–∞–∫–∞–∑—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è', '‚≠ïÔ∏è –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω']
    is_pay = ['‚úÖ üë§ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–≤—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞)', '‚úÖ –Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'] if employee.is_pay else ['‚≠ïÔ∏è¬†üë§ –í—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–≤—ã –Ω–µ¬†–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞)', '‚≠ïÔ∏è –Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']
    export = ['‚úÖ üìë –≠–∫—Å–ø–æ—Ä—Ç –≤ Google-—Ç–∞–±–ª–∏—Ü—ã –≤–∫–ª—é—á–µ–Ω (–ø–æ–¥—Ä–æ–±–Ω–µ–µ üëâüèª /export)', '‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Google-—Ç–∞–±–ª–∏—Ü—ã']  if seller.export else ['‚≠ïÔ∏è¬†üìë –≠–∫—Å–ø–æ—Ä—Ç –≤ Google-—Ç–∞–±–ª–∏—Ü—ã –≤—ã–∫–ª—é—á–µ–Ω (–ø–æ–¥—Ä–æ–±–Ω–µ–µ üëâüèª /export)', '‚≠ïÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –≤ Google (–≤–∫–ª—é—á–∏—Ç—å?)']
    is_key_words = ['‚úÖ üîç –ü–æ–∫–∞–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –∑–∞–∫–∞–∑–æ–≤ –≤–∫–ª—é—á–µ–Ω', '‚úÖ –ü–æ–∫–∞–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤']  if employee.is_key_words else ['‚≠ïÔ∏è¬†üîç¬†–ü–æ–∫–∞–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –∑–∞–∫–∞–∑–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω', '‚≠ïÔ∏è –ü–æ–∫–∞–∑ –∫–ª—é—á.—Å–ª–æ–≤ (–≤–∫–ª—é—á–∏—Ç—å?)']
    dragon = ['‚úÖ üêâ –†–µ–∂–∏–º ¬´–î—Ä–∞–∫–æ–Ω¬ª –≤–∫–ª—é—á–µ–Ω (–ø–æ–¥—Ä–æ–±–Ω–µ–µ üëâüèª /dragon)', '‚úÖ –†–µ–∂–∏–º ¬´–î—Ä–∞–∫–æ–Ω¬ª']  if seller.dragon else ['‚≠ïÔ∏è¬†üêâ –†–µ–∂–∏–º "–î—Ä–∞–∫–æ–Ω" –≤—ã–∫–ª—é—á–µ–Ω (–ø–æ–¥—Ä–æ–±–Ω–µ–µ üëâüèª /dragon)', '‚≠ïÔ∏è –†–µ–∂–∏–º ¬´–î—Ä–∞–∫–æ–Ω¬ª (–≤–∫–ª—é—á–∏—Ç—å?)']
    
    text = as_line(Bold(f'ü•ù {seller.name}'),
                   f'üí∞ –¢–∞—Ä–∏—Ñ: {seller.tariff}‚ÇΩ / –º–µ—Å',
                   f'‚è± –†–∞—Å—á—ë—Ç —Ç–∞—Ä–∏—Ñ–∞: {tariff_date}',
                   '.....',
                   '',
                   is_orders[0],
                   '',
                   is_pay[0],
                   '',
                   export[0],
                   '',
                   is_key_words[0],
                   '',
                   dragon[0],
                   sep='\n'
    )
    article_type = 'üÜî –ê—Ä—Ç–∏–∫—É–ª —Å—Å—ã–ª–∫–æ–π' if employee.is_article else 'üÜî –ê—Ä—Ç–∏–∫—É–ª —Ç–µ–∫—Å—Ç–æ–º + —Å—Å—ã–ª–∫–∞'
    text_and_data = []
    text_and_data.append([is_orders[1], f'settings_isorders_{seller_id}'])
    text_and_data.append([is_pay[1], f'settings_ispay_{seller_id}'])
    text_and_data.append([export[1], f'settings_export_{seller_id}'])
    text_and_data.append([is_key_words[1], f'settings_iskeywords_{seller_id}'])
    text_and_data.append([dragon[1], f'settings_dragon_{seller_id}'])
    text_and_data.append([article_type, f'settings_articletype_{seller_id}'])
    text_and_data.append([f'üì¶ –†–µ–∑–µ—Ä–≤ —Å–∫–ª–∞–¥–∞ {employee.stock_reserve} –¥–Ω', f'settings_stockreserve_{seller_id}'])
    text_and_data.append(['üîë API —Ç–æ–∫–µ–Ω FBO (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)', f'apifbo_{seller_id}'])
    text_and_data.append(['üîë API —Ç–æ–∫–µ–Ω FBS (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)', f'apifbs_{seller_id}'])
    text_and_data.append(['üßë‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', f'add_employee_{seller_id}'])
    text_and_data.append(['üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', f'notifications_{seller_id}'])
    text_and_data.append(['‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', f'delapifbo_{seller_id}_{employee.id}'])
    text_and_data.append(btn_back('settings'))
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_stockreserve(db_request, seller_id : int, tg_id : str):
    employee = db_request.get_employee(seller_id=seller_id, user_id=db_request.get_user(tg_id=tg_id).id)
    text = as_line(Bold('üì¶ –†–µ–∑–µ—Ä–≤ —Å–∫–ª–∞–¥–∞ '),
                   '',
                   '{bot_name} –ø–æ–∫–∞–∂–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–∫–ª–∞–¥ (–Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ —Ö–≤–∞—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π –¥–∏–Ω–∞–º–∏–∫–µ –ø—Ä–æ–¥–∞–∂).',
                   '',
                   f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {employee.stock_reserve} –¥–Ω.',
                   '',
                   'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–æ—Ç 3 –¥–æ 60):',
                   sep='\n'
    )
    reply_markup = InlineConstructor.create_kb(text_and_data=[btn_back(f'settings_{seller_id}')])
    return text.as_html(), reply_markup

def inline_kb_apifbo(db_request, seller_id : int, tg_id : str):
    seller = db_request.get_seller(id=seller_id)
    employee = db_request.get_employee(seller_id=seller_id, user_id=db_request.get_user(tg_id=tg_id).id)
    text = as_line(Bold('üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–º'),
                   '',
                   f'ü•ù {seller.name}',
                   '',
                   'üëáüèª –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                   sep='\n'
    )
    text_and_data = [
        ['–ó–∞–º–µ–Ω–∏—Ç—å API —Ç–æ–∫–µ–Ω FBO (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)', f'changeapifbo_{seller_id}'],
        ['–£–¥–∞–ª–∏—Ç—å API —Ç–æ–∫–µ–Ω FBO (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)', f'delapifbo_{seller_id}_{employee.id}'],
        btn_back(f'settings_{seller_id}')
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_change_apifbo(db_request, seller_id : int):
    seller = db_request.get_seller(id=seller_id)
    text = as_line(Bold('üîÑ –ó–∞–º–µ–Ω–∞ API —Ç–æ–∫–µ–Ω–∞ FBO (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)'),
                   '',
                   f'ü•ù {seller.name}',
                   '',
                   '–ó–∞–º–µ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –µ—Å–ª–∏ API —Ç–æ–∫–µ–Ω FBO (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) –±—ã–ª —É–¥–∞–ª—ë–Ω –≤ –∫–∞–±–∏–Ω–µ—Ç–µ Wildberries –∏–ª–∏ –≤—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Ç–∏–ø–∞ –∫–ª—é—á–∞ –Ω–∞ –Ω–æ–≤—ã–π. ',
                   '',
                   '1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API (—Å—Å—ã–ª–∫–∞). ',
                   '',
                   '2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω]. –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä {bot_name}}) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.',
                   '',
                   '3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ [–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω], –∞ –∑–∞—Ç–µ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ.',
                   '',
                   'üìù –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:',
                   sep='\n'
    )
    reply_markup = InlineKeyboardBuilder()
    reply_markup.add(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'settings_{seller_id}'))
    reply_markup.add(InlineKeyboardButton(text='ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=config.bot.support_url))
    return text.as_html(), reply_markup.as_markup()

def inline_kb_del_apifbo(db_request, seller_id : int, employee_id : int,  tg_id : str):
    
    employee = db_request.get_employee(id=employee_id)
    seller = db_request.get_seller(id=seller_id)
    text = as_line(Bold('üóë –£–¥–∞–ª–µ–Ω–∏–µ  '),
                   '',
                   '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ –±–æ—Ç–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫:',
                   f'ü•ù {seller.name}',
                   '',
                   '‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –æ—Ç—á—ë—Ç–∞—Ö –±–æ—Ç–∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.',
                   sep='\n'
    )
    text_and_data = [
        btn_back(f'apifbo_{seller_id}'),
        ['–£–¥–∞–ª–∏—Ç—å', f'delapifbo_accept_{seller_id}_{employee.id}'],
    ]
    schema = [2]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema)
    return text.as_html(), reply_markup

def inline_kb_apifbs(db_request, seller_id : int):
    seller = db_request.get_seller(id=seller_id)
    fbs_token = seller.token_fbs if seller.token_fbs else '‚ö†Ô∏è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    text = as_line(Bold('üîë API —Ç–æ–∫–µ–Ω FBS (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)  '),
                   '',
                   f'ü•ù {seller.name}',
                   '',
                   '–ï—Å–ª–∏ –≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ø–æ —Å—Ö–µ–º–µ FBS (–ø—Ä–æ–¥–∞–∂–∞ —Å–æ —Å–∫–ª–∞–¥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π API —Ç–æ–∫–µ–Ω (—Ç–∏–ø —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π), —á—Ç–æ–±—ã WbNinjaBot –º–æ–≥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã.',
                   '',
                   '(–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø—Ä–∏ —ç—Ç–æ–º –ø–µ—Ä–≤—ã–π API —Ç–æ–∫–µ–Ω FBO (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ–≥–æ —É–¥–∞–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.)',
                   '',
                   '1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API (—Å—Å—ã–ª–∫–∞). ',
                   '',
                   '2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω]. –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä {bot_name}) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π.',
                   '',
                   '3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ [–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω], –∞ –∑–∞—Ç–µ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ.',
                   '',
                   f'–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: {fbs_token}',
                   '',
                   'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:',
                   sep='\n'
    )
    text_and_data = []

    if seller.token_fbs:
        text_and_data.append(['–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω', f'changeapifbs_accept_{seller_id}'])
        text_and_data.append(['–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω', f'changeapifbs_accept_{seller_id}'])

    text_and_data.append(btn_back(f'settings_{seller_id}'))

    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_notifications(db_request, seller_id : int):
    seller = db_request.get_seller(id=seller_id)
    text = as_line(Bold('üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'),
                   '',
                   f'ü•ù {seller.name}',
                   sep='\n'
    )
    text_and_data = [
        ['–ó–∞–∫–∞–∑—ã', f'notiforders_{seller_id}'],
        ['–í—ã–∫—É–ø—ã', f'notifbuyout_{seller_id}'],
        ['–û—Ç–º–µ–Ω—ã / –í–æ–∑–≤—Ä–∞—Ç—ã', f'notifcancel_{seller_id}'],
        btn_back(f'settings_{seller_id}')
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_notiforders(db_request, employee_id : int, seller_id : int, button : str):
    text = Bold('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑–∞–º')
    text_and_data = [
        ['–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å—ë', f'notiforders_{seller_id}_all'],
        ['–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è', f'notiforders_{seller_id}_1'],
        ['–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è', f'notiforders_{seller_id}_2'],
        ['–ï—Å–ª–∏ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è', f'notiforders_{seller_id}_3'],
        ['–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º', f'notiforders_{seller_id}_4'],
        ['–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å—ë', f'notiforders_{seller_id}_none'],
        btn_back(f'notifications_{seller_id}')
    ]
    employee = db_request.get_employee(id=employee_id)

    if all([employee.order_notif_end, employee.order_notif_ending, employee.order_notif_commission, employee.order_notif_favorites]) \
        and button == 'all':
        text_and_data[0][0] = 'üëâ ' + text_and_data[0][0]
        text_and_data[1][1] = f'notiforders_{seller_id}_all_1'
        text_and_data[2][1] = f'notiforders_{seller_id}_all_2'
        text_and_data[3][1] = f'notiforders_{seller_id}_all_3'
        text_and_data[4][1] = f'notiforders_{seller_id}_all_4'

    elif all([not employee.order_notif_end, not employee.order_notif_ending, not employee.order_notif_commission, not employee.order_notif_favorites]):
        text_and_data[5][0] = 'üëâ ' + text_and_data[5][0]
    else:
        if employee.order_notif_end:
            text_and_data[1][0] = 'üëâ ' + text_and_data[1][0]
        if employee.order_notif_ending:
            text_and_data[2][0] = 'üëâ ' + text_and_data[2][0]
        if employee.order_notif_commission:
            text_and_data[3][0] = 'üëâ ' + text_and_data[3][0]
        if employee.order_notif_favorites:
            text_and_data[4][0] = 'üëâ ' + text_and_data[4][0]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_notifbuyout(db_request, employee_id : int, seller_id : int, button : str):
    text = Bold('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—ã–∫—É–ø–∞–º')
    text_and_data = [
        ['–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å—ë', f'notifbuyout_{seller_id}_all'],
        ['–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è', f'notifbuyout_{seller_id}_1'],
        ['–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è', f'notifbuyout_{seller_id}_2'],
        ['–ï—Å–ª–∏ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è', f'notifbuyout_{seller_id}_3'],
        ['–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º', f'notifbuyout_{seller_id}_4'],
        ['–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å—ë', f'notifbuyout_{seller_id}_none'],
        btn_back(f'notifications_{seller_id}')
    ]
    employee = db_request.get_employee(id=employee_id)
    if all([employee.buyout_notif_end, employee.buyout_notif_ending, employee.buyout_notif_commission, employee.buyout_notif_favorites]) \
        and button == 'all':
        text_and_data[0][0] = 'üëâ ' + text_and_data[0][0]
        text_and_data[1][1] = f'notifbuyout_{seller_id}_all_1'
        text_and_data[2][1] = f'notifbuyout_{seller_id}_all_2'
        text_and_data[3][1] = f'notifbuyout_{seller_id}_all_3'
        text_and_data[4][1] = f'notifbuyout_{seller_id}_all_4'
    elif all([not employee.buyout_notif_end, not employee.buyout_notif_ending, not employee.buyout_notif_commission, not employee.buyout_notif_favorites]):
        text_and_data[5][0] = 'üëâ ' + text_and_data[5][0]
    else:
        if employee.buyout_notif_end:
            text_and_data[1][0] = 'üëâ ' + text_and_data[1][0]
        if employee.buyout_notif_ending:
            text_and_data[2][0] = 'üëâ ' + text_and_data[2][0]
        if employee.buyout_notif_commission:
            text_and_data[3][0] = 'üëâ ' + text_and_data[3][0]
        if employee.buyout_notif_favorites:
            text_and_data[4][0] = 'üëâ ' + text_and_data[4][0]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_notifcancel(db_request, employee_id : int, seller_id : int):
    text = Bold('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –æ—Ç–º–µ–Ω–∞–º –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞–º')
    text_and_data = [
        ['–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å—ë', f'notifcancel_{seller_id}_1'],
        ['–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å—ë', f'notifcancel_{seller_id}_2'],
        btn_back(f'notifications_{seller_id}')
    ]
    employee = db_request.get_employee(id=employee_id)
    if employee.cancel_notif:
        text_and_data[0][0] = 'üëâ ' + text_and_data[0][0]
    else:
        text_and_data[1][0] = 'üëâ ' + text_and_data[1][0]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_balance(db_request, tg_id : str):
    user = db_request.get_user(tg_id=tg_id)
    sellers = db_request.get_seller(user_id=user.id)
    tariff = sum([s.tariff for s in sellers])
    text = as_line(Bold(f'üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ'),
                   '',
                   f'¬∑ –í–∞—à —Ç–∞—Ä–∏—Ñ: {tariff}‚ÇΩ / –º–µ—Å',
                   f'¬∑ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: {len(sellers)}',
                   '',
                   'üë®‚Äçüíºüë©üèª‚Äçüíº –ï—Å–ª–∏ –∫ –≤–∞—à–µ–º—É API-–∫–ª—é—á—É –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –∫—Ç–æ-—Ç–æ –æ–¥–∏–Ω (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º), –∞ –ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ.',
                   '',
                   'üîí –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –í–∞—à–µ–º—É —Å–æ–≥–ª–∞—Å–∏—é.',
                   '',
                   'üõ° –î–µ–Ω—å–≥–∏ —Å –≤–∞—à–∏—Ö –∫–∞—Ä—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è.',
                   '',
                   '‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ üëâüèª /tariff',
                   sep='\n'
    )
    
    text_and_data = [
        [f'+ {tariff}‚ÇΩ', f'transaction_{tariff}']
    ]
    for i in [1, 3, 5, 10]:
        if i * 1000 > tariff:
            text_and_data.append([f'+ {i * 1000}‚ÇΩ', f'transaction_{i * 1000}'])
    schema = [1 for _ in text_and_data]
    button_type = ['callback_data' for _ in text_and_data]
    text_and_data.append(['–í–≤–µ—Å—Ç–∏ –∫—É–ø–æ–Ω', 'coupon'])
    text_and_data.append(['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è', 'credit'])
    text_and_data.append(['–°–ø–∏—Å–∞–Ω–∏—è', 'debit'])
    text_and_data.append(['ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', config.bot.support_url])
    text_and_data.append(btn_back('my'))
    schema += [1, 2, 1, 1]
    button_type += ['callback_data', 'callback_data', 'url', 'callback_data']
    
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema, button_type=button_type)
    return text.as_html(), reply_markup
    
def inline_kb_payment(sum : int, payment_link : str):
    text = as_line(Bold(f'üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {sum}‚ÇΩ'),
                   '',
                   'üîí –û–ø–ª–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–æ–ø–∞—Å–Ω–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.',
                   '',
                   'üá∑üá∫ –û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –∫–∞—Ä—Ç–æ–π –ª—é–±–æ–≥–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –±–∞–Ω–∫–∞ (–°–±–µ—Ä, –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –ê–ª—å—Ñ–∞–±–∞–Ω–∫ –∏ —Ç.–¥.), –∞ —Ç–∞–∫–∂–µ Tinkoff Pay, –°–ë–ü, –ØPAY.',
                   '',
                   'üá∞üáøüáßüáæüá∫üáøüá∞üá¨ –û–ø–ª–∞—Ç–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @SUPPORT!!!',
                   '',
                   'üïî –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –ø–æ—Å—Ç—É–ø–∞—é—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.',
                   '',
                   'üí™üèª –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–∏—Å–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ).',
                   sep='\n'
    )
    text_and_data = [
        ['–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', 'https://www.google.ru'],
        btn_back('balan—Åe')
    ]
    button_type = ['url', 'callback_data']
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, button_type=button_type)
    return text.as_html(), reply_markup

def inline_kb_credit(db_request, tg_id : str):
    user = db_request.get_user(tg_id=tg_id)
    transactions = db_request.get_transaction(user_id=user.id, type=False)
    text = as_line(Bold('üßæ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è'),
                   '',
                   sep='\n'
    )
    if not transactions:
        text += '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ'
    else:
        for t in transactions:
            if t.type:
                bill = t.bill_link if t.bill_link.startswith('–ö—É–ø–æ–Ω') else TextLink(f'‚Ññ{t.bill_number}', url=t.bill_link)
                text += f'–î–∞—Ç–∞:¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†{t.datetime.strftime("%d.%m.%Y %H:%M")}\n–ù–æ–º–µ—Ä:¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†{t.id}\n–ó–∞—á–∏—Å–ª–µ–Ω–æ:¬†¬†¬†¬†¬†¬†¬†{t.sum}‚ÇΩ\n–ö–∞—Å—Å–æ–≤—ã–π —á–µ–∫:¬†¬†{bill}\n\n'
    text_and_data = [
        btn_back('balan—Åe')
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_debit(db_request, tg_id : str):
    user = db_request.get_user(tg_id=tg_id)
    transactions = db_request.get_transaction(user_id=user.id, type=False)
    text = as_line(Bold('üßæ –°–ø–∏—Å–∞–Ω–∏—è'),
                   '',
                   sep='\n'
    )
    if not transactions:
        text += '–°–ø–∏—Å–∞–Ω–∏—è –µ—â–µ –Ω–µ –±—ã–ª–æ'
    else:
        for t in transactions:
            if not t.type:
                text += f'–ù–æ–º–µ—Ä:¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†{t.id}\n–î–∞—Ç–∞:¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†{t.datetime.strftime("%d.%m.%Y %H:%M")}\n–ü–æ—Å—Ç–∞–≤—â–∏–∫:      {t.seller_name}\n–¢–∞—Ä–∏—Ñ:               {t.tariff}\n–ë–∞–ª–∞–Ω—Å:             {t.balance}\n–ó–∞—á–∏—Å–ª–µ–Ω–æ:¬†¬†¬†¬†¬†¬†¬†{t.sum}‚ÇΩ\n\n'
    text_and_data = [
        btn_back('balan—Åe')
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_coupon():
    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞:'
    reply_markup = InlineConstructor.create_kb(text_and_data=[btn_back('balan—Åe')])
    return text, reply_markup

def inline_kb_tariff():
    text = as_line(Bold('üí∞ –¢–∞—Ä–∏—Ñ—ã {bot_name}'),
                   '',
                   '–¢–µ—Å—Ç–æ–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 14 –¥–Ω–µ–π (—Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞).',
                   '',
                   '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–∞ –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –∑–∞ 1 –º–µ—Å—è—Ü. –û–ø–ª–∞—Ç—É –±–æ—Ç —Å–ø–∏—Å—ã–≤–∞–µ—Ç —Å –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ –∑–∞ –¥–µ–Ω—å —Ä–∞–±–æ—Ç—ã. ',
                   '',
                   '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 30 –¥–Ω–µ–π –¥–æ —Ä–∞—Å—á–µ—Ç–Ω–æ–π –¥–∞—Ç—ã (–ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –≤ —Ä–∞—Å—á–µ—Ç–Ω—ã–π –¥–µ–Ω—å, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥–∞—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞). ',
                   '',
                   '–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ –º–µ—Å—è—Ü —Å–æ—Å—Ç–∞–≤–∏—Ç:',
                   '',
                   '–û—Ç 1 –¥–æ 300 = 290‚ÇΩ / –º–µ—Å',
                   '', 
                   '–û—Ç 301 –¥–æ 1000 = 490‚ÇΩ / –º–µ—Å', 
                   '', 
                   '–û—Ç 1001 –¥–æ 3000 = 790‚ÇΩ / –º–µ—Å', 
                   '', 
                   '–û—Ç 3001 –¥–æ 10 000 = 1090‚ÇΩ / –º–µ—Å', 
                   '', 
                   '–û—Ç 10 001 –¥–æ 100 000 = 1390‚ÇΩ / –º–µ—Å', 
                   '', 
                   '–û—Ç 100 001 = 1690‚ÇΩ / –º–µ—Å ', 
                   '(+300‚ÇΩ / –º–µ—Å –∑–∞ –∫–∞–∂–¥—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 100 000 –ø—Ä–æ–¥–∞–∂). ', 
                   '', 
                   '–ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–æ—Ç—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ (API-–∫–ª—é—á–µ–π) —Ç–∞—Ä–∏—Ñ—ã —Å—É–º–º–∏—Ä—É—é—Ç—Å—è.', 
                   '', 
                   '–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', 
                   '', 
                   '‚úÖ üë®‚Äçüíºüë©üèª‚Äçüíº –ó–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫ –≤–∞—à–∏–º API-–∫–ª—é—á–∞–º, –æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è. ', 
                   '', 
                   '‚úÖ üêâ –ó–∞–∫–∞–∑—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ —Ä–µ–∂–∏–º–µ –î—Ä–∞–∫–æ–Ω–∞, –Ω–µ —Ç–∞—Ä–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è. ', 
                   '', 
                   '‚úÖ üîí –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –í–∞—à–µ–º—É —Å–æ–≥–ª–∞—Å–∏—é.', 
                   '', 
                   '‚úÖ üõ° –î–µ–Ω—å–≥–∏ —Å –∫–∞—Ä—Ç—ã –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è.', 
                   '', 
                   sep='\n'
    )

    text += as_line(f'üìπ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å üëâüèª',
                    TextLink("–≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url=config.bot.videoinstruction)
    )

    text += as_line('',
                    '‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ üëâüèª /balance',
                    sep='\n'
    )
    text_and_data = [
        ['–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', 'balan—Åe']
    ]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup
                   
def inline_kb_news(db_request, news_id : int = None, tg_id : str = None):
    text = '<b>–ù–û–í–û–°–¢–ò</b>\n\n'
    news_ids = [n.id for n in db_request.get_news()]
    schema = None
    button_type = None
    if news_ids:
        current_news = db_request.get_news(id=news_id) if news_id else db_request.get_news(id=news_ids[-1])
        text += current_news.publication_date.strftime('%d.%m.%Y\n')
        text += current_news.text
        text_and_data = []
        if news_id == news_ids[-1] and len(news_ids) == 1:
            text_and_data = [['ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', config.bot.support_url]]
        elif news_id == news_ids[-1] and len(news_ids) > 1:
            text_and_data.append(['–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', f'news_{news_ids[-2]}'])
        elif not news_id and len(news_ids) == 1:
            text_and_data = [['ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', config.bot.support_url]]
        elif news_id == news_ids[0] and len(news_ids) > 1:
            text_and_data.append(['‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', f'news_{news_ids[1]}'])
        else:
            next_id = news_ids[news_ids.index(news_id) - 1]
            prev_id = news_ids[news_ids.index(news_id) + 1]
            text_and_data.append(['‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', f'news_{prev_id}'])
            text_and_data.append(['–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', f'news_{next_id}'])
            schema = [2]
    else:
        text += '–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç...'
        text_and_data = [['ü§µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', config.bot.support_url]]
        button_type = ['url']

    if db_request.get_user(tg_id=tg_id).is_admin:
        text_and_data.append(['–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å', f'addnews_{news_id}'])
        if news_ids:
            news_id = news_ids[0] if not news_id else news_id
            id = news_ids[news_ids.index(news_id) - 1] if news_id != news_ids[0] and news_id != None else news_ids[0] if news_id != news_ids[0] else news_ids[1] if len(news_ids) > 1 else None
            text_and_data.append(['–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å', f'delnews_{id}_{news_id}'])
        if schema:
            schema += [1, 1]
        if button_type:
            button_type += ['callback_data', 'callback_data']
    
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema, button_type=button_type)
    return text, reply_markup

def inline_kb_addnews(news_id):
    text = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏.\n\n–ß—Ç–æ–±—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML —Ä–∞–∑–º–µ—Ç–∫—É.'
    reply_markup = InlineConstructor.create_kb(text_and_data=[btn_back(f'news_{news_id}')])
    return text, reply_markup

def inline_kb_stocks(db_request, tg_id : str):
    text = as_line(Bold('–¢–û–í–ê–†–´ –ò –û–°–¢–ê–¢–ö–ò'),
                   '',
                   sep='\n'
    )

    sellers = db_request.get_seller(user_id=db_request.get_user(tg_id=tg_id).id)
    is_selected = []
    for seller in sellers:
        employee = db_request.get_employee(seller_id=seller.id, user_id=db_request.get_user(tg_id=tg_id).id)
        is_selected.append(employee.is_selected)
        if employee.is_selected:
            products = db_request.get_product(seller_id=seller.id)
            product_warehouse = db_request.get_product_warehouse(seller_id=seller.id)
            quantity = sum([pw.quantity for pw in product_warehouse])
            inWayToClient = sum([pw.inWayToClient for pw in product_warehouse])
            inWayFromClient = sum([pw.inWayFromClient for pw in product_warehouse])

            text += as_line(Bold(seller.name),
                        f'üì¶ –û—Å—Ç–∞—Ç–∫–∏ –≤—Å–µ–≥–æ: {quantity}',
                        f'üöõ –í –ø—É—Ç–∏ –¥–æ –∫–ª–∏–µ–Ω—Ç–∞: {inWayToClient}',
                        f'üöö –í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç—ã: {inWayFromClient}',
                        f'üóÇ –ê—Ä—Ç–∏–∫—É–ª—ã –≤ –ø—Ä–æ–¥–∞–∂–µ: {len(products)}',
                        '',
                        sep='\n'
            )
    
    text_and_data = [
        ['üì¶ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã','myproducts_1'],
        ['üíü –ò–∑–±—Ä–∞–Ω–Ω–æ–µ','favorites_1'],
        ['üóÑ –ê—Ä—Ö–∏–≤','archive_1'],
    ]
    if len(sellers) > 1:
        btn = '–ü–æ –≤—Å–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º' if all(is_selected) else f'–í—ã–±—Ä–∞–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {len([i for i in is_selected if i])}'
        text_and_data.insert(0, [btn,'selectseller_stock'])
    
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_selectseller(db_request, tg_id : str, code : str = 'all', back : str = None):
    sellers = db_request.get_seller(user_id=db_request.get_user(tg_id=tg_id).id)
    text = as_line(Bold('–í—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'),
                   '',
                   '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—á—ë—Ç:',
                   sep='\n'
    )
    text_and_data = []
    is_selected = []
    for seller in sellers:
        employee = db_request.get_employee(seller_id=seller.id, user_id=db_request.get_user(tg_id=tg_id).id)
        is_selected.append(employee.is_selected)
        btn = f'üëâ {seller.name}' if employee.is_selected else seller.name
        text_and_data.append([btn, f'selectseller_{back}_{seller.id}'])
    
    btn = [f'üëâ –ü–æ –≤—Å–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º', 'none'] if all(is_selected) and code == 'all' else ['–ü–æ –≤—Å–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º', f'selectseller_{back}_all']
    text_and_data.append(btn)

    if all(is_selected) and code == 'all':
        text_and_data = [[tad[0].strip('üëâ '), tad[1]] for tad in text_and_data[:-1]] + [text_and_data[-1]]
    text_and_data.append(btn_back(back))

    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_stock_myproducts(db_request, tg_id : str, page : int = 1, filter : str = None):
    title = '–ú–û–ò –¢–û–í–ê–†–´' if filter == 'myproducts' else '–ò–ó–ë–†–ê–ù–ù–û–ï' if filter == 'favorites' else '–ê–†–•–ò–í'
    text = as_line(Bold(title),
                   sep='\n'
    )
    user = db_request.get_user(tg_id=tg_id)
    products_dcts = []
    total_revenue = {}
    seller_ids = [s.id for s in db_request.get_seller(user_id=user.id) if db_request.get_employee(seller_id=s.id, user_id=user.id).is_selected]
    for seller_id in seller_ids:
        products = db_request.get_product(seller_id=seller_id)
        for product in products:
            user_seller = db_request.get_employee(user_id=user.id, seller_id=product.seller.id)
            product_warehouse = db_request.get_product_warehouse(product_id=product.id)
            products_dct = {}
            products_dct['product'] = product
            products_dct['seller_id'] = seller_id
            products_dct["rating"] = product.rating
            products_dct["reviews"] = product.reviews
            products_dct['inWayToClient'] = sum([p.inWayToClient for p in product_warehouse])
            products_dct['inWayFromClient'] = sum([p.inWayFromClient for p in product_warehouse])
            products_dct['stock'] = sum([p.quantity for p in product_warehouse])
            products_dct['sales_list'] = db_request.get_sale(product_id=product.id, type='S', period=f"{(datetime.now() - timedelta(days=91)).strftime('%d.%m.%Y')} - {datetime.now().strftime('%d.%m.%Y')}")
            products_dct['sales'] = len(products_dct['sales_list']) - products_dct['inWayFromClient']
            gNumbers = [s['gNumber'] for s in products_dct['sales_list']]
            products_dct['orders_list'] = [o for o in db_request.get_order(product_id=product.id, period=f"{(datetime.now() - timedelta(days=91)).strftime('%d.%m.%Y')} - {datetime.now().strftime('%d.%m.%Y')}") if o['gNumber'] in gNumbers]
            products_dct['sales_revenue'] = sum([s['priceWithDisc'] for s in products_dct['sales_list']])
            try:
                total_revenue[seller_id] += products_dct['sales_revenue']
            except:
                total_revenue[seller_id] = products_dct['sales_revenue']
            try:
                products_dct['load'] = int((len(products_dct["orders_list"])/91) * user_seller.stock_reserve - products_dct["stock"])
            except:
                products_dct['load'] = 0
            try:
                products_dct['buyout'] = int((products_dct["sales"]/len(products_dct["orders_list"])) * 100)
            except:
                products_dct['buyout'] = 0
            products_dct['favorites'] = True if product.id in [p.id for p in db_request.get_product(in_favorites=user_seller.id)] else False            
            products_dct['archive'] = True if product.id in [p.id for p in db_request.get_product(in_archive=user_seller.id)] else False
            if filter == 'favorites':
                if products_dct['favorites']:
                    products_dcts.append(products_dct)
            elif filter == 'archive':
                if products_dct['archive']:
                    products_dcts.append(products_dct)
            else:
                products_dcts.append(products_dct)

    cumulative_total = {}
    products_dcts_revenue_sorted = sorted(products_dcts, key=lambda x:x['sales_revenue'], reverse=True)
    for seller_id in seller_ids:
        for product in products_dcts_revenue_sorted:
            if product['seller_id'] == seller_id:
                try:
                    product['abc'] = product['sales_revenue'] / total_revenue[product['seller_id']] * 100
                except:
                    product['abc'] = 0
                try:
                    cumulative_total[product['seller_id']] += product['abc']
                except:
                    cumulative_total[product['seller_id']] = product['abc']
                product['cumulative_total'] = cumulative_total[product['seller_id']]
                if cumulative_total[product['seller_id']] <= 80:
                    product['abc_key'] = 'A'
                elif 80 < cumulative_total[product['seller_id']] <= 95:
                    product['abc_key'] = 'B'
                else:
                    product['abc_key'] = 'C'
    
    key = str(user.stock_sorting).replace('StockSorting.', '').replace('ASC', '').replace('DESC', '')
    
    if 'ASC' in str(user.stock_sorting):
        products_dcts_sorted = sorted(products_dcts_revenue_sorted, key=lambda x:x[key])
    else:
        products_dcts_sorted = sorted(products_dcts_revenue_sorted, key=lambda x:x[key], reverse=True)

    addfavorites_code = 'addfav'
    delfavorites_code = 'delfav'
    for product in products_dcts_sorted[page * 10 - 10:page * 10]:    
        
        url = f"https://www.wildberries.ru/catalog/{product['product'].nmId}/detail.aspx"
        text += as_line('')
        text += as_line(f'üÜî –ê—Ä—Ç–∏–∫—É–ª WB: ',
                        TextLink(product["product"].nmId, url=url),
        )
        text += as_line(f'üìÅ {product["product"].subject}',
        )
        text += as_line(f'üè∑ {product["product"].brand} / ',
                        TextLink(product["product"].supplierArticle, url=url)
        )
        try:
            days = int(product["stock"]/(len(product["orders_list"])/91))
        except:
            days = 0
        fill_stock_str = f'üöó –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–ª–∞–¥ –Ω–∞ {product["load"]} —à—Ç.' if product["load"] > 0 else ''
        text += as_line(f'‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {product["rating"]}',
                        f'üí¨ –û—Ç–∑—ã–≤—ã: {product["reviews"]}',
                        f'üíé –í—ã–∫—É–ø –∑–∞ 3 –º–µ—Å: {product["buyout"]}% ({product["sales"]}/{len(product["orders_list"])})',
                        f'üüß ABC-–∞–Ω–∞–ª–∏–∑: {product["abc_key"]} ({round(product["abc"], 2)}%)',
                        f'üöõ –í –ø—É—Ç–∏ –¥–æ –∫–ª–∏–µ–Ω—Ç–∞: {product["inWayToClient"]}',
                        f'üöö –í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç—ã: {product["inWayFromClient"]}',
                        f'üì¶ –ù–∞ —Å–∫–ª–∞–¥–µ: {product["stock"]} —à—Ç.',
                        f'üóì –•–≤–∞—Ç–∏—Ç –Ω–∞ {days} –¥–Ω.',
                        sep='\n'
        )
        if fill_stock_str:
            text += as_line(fill_stock_str)

        if product['favorites']:
            text += as_line(f'üíü¬†', TextLink('[‚Äì –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ]', url=f'{config.bot.bot_url}?start=favorites_{product["product"].id}')
            )
            delfavorites_code += '_' + str(product["product"].id)
        else:
            text += as_line(f'üíü¬†', TextLink('[+ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ]', url=f'{config.bot.bot_url}?start=favorites_{product["product"].id}')
            )
            addfavorites_code += '_' + str(product["product"].id)
        if product['archive']:
            text += as_line(f'üóÑ ', TextLink('[- –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞—Ä—Ö–∏–≤–∞]', url=f'{config.bot.bot_url}?start=archive_{product["product"].id}')
            )
        else:
            text += as_line(f'üóÑ ', TextLink('[+ –î–æ–±–∞–≤–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤]', url=f'{config.bot.bot_url}?start=archive_{product["product"].id}')
            )
    
        
    if len(addfavorites_code.split('_')) == 1:
        addfavorites_text = 'üíî –£–¥–∞–ª–∏—Ç—å –≤—Å—ë –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'
        favorites_code = delfavorites_code
    else:
        addfavorites_text = 'üíü –î–æ–±–∞–≤–∏—Ç—å –≤—Å—ë –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'
        favorites_code = addfavorites_code
    
    text_and_data = [
        ['–ü—Ä–æ–¥–∞–∂–∏ üî∫', f'{filter}_salesASC_1'],
        ['–ü—Ä–æ–¥–∞–∂–∏ üîª', f'{filter}_salesDESC_1'],
        ['–ü–æ–ø–æ–ª–Ω–∏—Ç—å üî∫', f'{filter}_loadASC_1'],
        ['–ü–æ–ø–æ–ª–Ω–∏—Ç—å üîª', f'{filter}_loadDESC_1'],
        ['–û—Å—Ç–∞—Ç–∫–∏ üî∫', f'{filter}_stockASC_1'],
        ['–û—Å—Ç–∞—Ç–∫–∏ üîª', f'{filter}_stockDESC_1'],
        ['–†–µ–π—Ç–∏–Ω–≥ üî∫', f'{filter}_ratingASC_1'],
        ['–†–µ–π—Ç–∏–Ω–≥ üîª', f'{filter}_ratingDESC_1'],
        ['–û—Ç–∑—ã–≤—ã üî∫', f'{filter}_reviewsASC_1'],
        ['–û—Ç–∑—ã–≤—ã üîª', f'{filter}_reviewsDESC_1'],
        ['–í—ã–∫—É–ø üî∫', f'{filter}_buyoutASC_1'],
        ['–í—ã–∫—É–ø üîª', f'{filter}_buyoutDESC_1'],
        ['ABC-–∞–Ω–∞–ª–∏–∑ üî∫', f'{filter}_abcASC_1'],
        ['ABC-–∞–Ω–∞–ª–∏–∑ üîª', f'{filter}_abcDESC_1'],
        [addfavorites_text, favorites_code],
        btn_back('stock'),
        ['üîç –ü–æ–∏—Å–∫', 'none'],
    ]
    for i in range(len(text_and_data)):
        if str(user.stock_sorting).strip('StockSorting.') in text_and_data[i][1]:
            text_and_data[i][0] = 'üü¢ ' + text_and_data[i][0]
    schema = [2, 2, 2, 2, 2, 2, 2, 1, 2]

    if filter in ['favorites', 'archive']:
        del text_and_data[-3]
        del schema[-2]

    for i in range(len(text_and_data)):
        if str(user.reports_groupby).replace('ReportsGroupBy.', '').lower() in text_and_data[i][1]:
            text_and_data[i][0] = 'üü¢ ' + text_and_data[i][0]
            text_and_data[i][1] = 'none' 
    if page == 1:
        if len(products_dcts_sorted) > 10:
            text_and_data.insert(0, ['–°–ª–µ–¥ ‚û°Ô∏è', f'{filter}_{page + 1}'])
            schema.insert(0, 1)
    elif page == (len(products_dcts_sorted) // 10) + 1 or page == len(products_dcts_sorted) // 10:
        text_and_data.insert(0, ['‚¨ÖÔ∏è –ü—Ä–µ–¥', f'{filter}_{page - 1}'])
        schema.insert(0, 1)
    else:
        text_and_data.insert(0, ['–°–ª–µ–¥ ‚û°Ô∏è', f'{filter}_{page + 1}'])
        text_and_data.insert(0, ['‚¨ÖÔ∏è –ü—Ä–µ–¥', f'{filter}_{page - 1}'])
        schema.insert(0, 2)

    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema)
    return text.as_html(), reply_markup

def inline_kb_reports(db_request, tg_id : str):
    text = as_line(Bold('–°–í–û–î–ö–ê'),
                   '',
                   sep='\n'
    )

    sellers = db_request.get_seller(user_id=db_request.get_user(tg_id=tg_id).id)
    is_selected = []
    for seller in sellers:
        employee = db_request.get_employee(seller_id=seller.id, user_id=db_request.get_user(tg_id=tg_id).id)
        is_selected.append(employee.is_selected)
        if employee.is_selected:
            today_orders = [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in db_request.get_order(seller_id=seller.id, period='today', select_for='reports')]
            yesterday_orders = [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in db_request.get_order(seller_id=seller.id, period='yesterday', select_for='reports')]
            week_orders = [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in db_request.get_order(seller_id=seller.id, period='week', select_for='reports')]
            month_orders = [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in db_request.get_order(seller_id=seller.id, period='month', select_for='reports')]

            today_sales = [s['priceWithDisc'] for s in db_request.get_sale(seller_id=seller.id, period='today', type='S', select_for='reports')]
            yesterday_sales = [s['priceWithDisc'] for s in db_request.get_sale(seller_id=seller.id, period='yesterday', type='S', select_for='reports')]
            week_sales = [s['priceWithDisc'] for s in db_request.get_sale(seller_id=seller.id, period='week', type='S', select_for='reports')]
            month_sales = [s['priceWithDisc'] for s in db_request.get_sale(seller_id=seller.id, period='month', type='S', select_for='reports')]

            today_returns = [s['priceWithDisc'] for s in db_request.get_sale(seller_id=seller.id, period='today', type='R', select_for='reports')]
            yesterday_returns = [s['priceWithDisc'] for s in db_request.get_sale(seller_id=seller.id, period='yesterday', type='R', select_for='reports')]
            week_returns = [s['priceWithDisc'] for s in db_request.get_sale(seller_id=seller.id, period='week', type='R', select_for='reports')]
            month_returns = [s['priceWithDisc'] for s in db_request.get_sale(seller_id=seller.id, period='month', type='R', select_for='reports')]
            text += as_line(f'ü•ù {seller.name}',
                            '',
                            Bold('–°–ï–ì–û–î–ù–Ø'),
                            f"üõí –ó–∞–∫–∞–∑—ã:        {len(today_orders)} –Ω–∞ {'{0:,}'.format(int(sum(today_orders))).replace(',', ' ')}‚ÇΩ",
                            f"üí≥ –í—ã–∫—É–ø—ã:       {len(today_sales)} –Ω–∞ {'{0:,}'.format(int(sum(today_sales))).replace(',', ' ')}‚ÇΩ",
                            f'‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã:   ‚ÄØ{len(today_returns)}',
                            '',
                            Bold('–í–ß–ï–†–ê'),
                            f"üõí –ó–∞–∫–∞–∑—ã:        {len(yesterday_orders)} –Ω–∞ {'{0:,}'.format(int(sum(yesterday_orders))).replace(',', ' ')}‚ÇΩ",
                            f"üí≥ –í—ã–∫—É–ø—ã:       {len(yesterday_sales)} –Ω–∞ {'{0:,}'.format(int(sum(yesterday_sales))).replace(',', ' ')}‚ÇΩ",
                            f'‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã:   ‚ÄØ{len(yesterday_returns)}',
                            '',
                            Bold('–ó–ê 7 –î–ù–ï–ô'),
                            f"üõí –ó–∞–∫–∞–∑—ã:        {len(week_orders)} –Ω–∞ {'{0:,}'.format(int(sum(week_orders))).replace(',', ' ')}‚ÇΩ",
                            f"üí≥ –í—ã–∫—É–ø—ã:       {len(week_sales)} –Ω–∞ {'{0:,}'.format(int(sum(week_sales))).replace(',', ' ')}‚ÇΩ",
                            f'‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã:   ‚ÄØ{len(week_returns)}',
                            '',
                            Bold('–ó–ê 30 –î–ù–ï–ô'),
                            f"üõí –ó–∞–∫–∞–∑—ã:        {len(month_orders)} –Ω–∞ {'{0:,}'.format(int(sum(month_orders))).replace(',', ' ')}‚ÇΩ",
                            f"üí≥ –í—ã–∫—É–ø—ã:       {len(month_sales)} –Ω–∞ {'{0:,}'.format(int(sum(month_sales))).replace(',', ' ')}‚ÇΩ",
                            f'‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã:   ‚ÄØ{len(month_returns)}',
                            '',
                            sep='\n')
    text += as_line('‚ÑπÔ∏è –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.')
    text_and_data = [
        ['–°–µ–≥–æ–¥–Ω—è','reports_today_1'],
        ['–í—á–µ—Ä–∞','reports_yesterday_1'],
        ['7 –¥–Ω–µ–π','reports_week_1'],
        ['30 –¥–Ω–µ–π','reports_month_1'],
        ['–î—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥','reports_timedelta'],
        ['üõí –ó–∞–∫–∞–∑—ã','reportorders_1'],
        ['üí≥ –í—ã–∫—É–ø—ã','repsalesS_1'],
        ['‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã','repsalesR_1'],
        ['‚õî –®—Ç—Ä–∞—Ñ—ã','repsalesD_1']
    ]
    schema = [2, 2, 1, 2, 2]
    if len(sellers) > 1:
        btn = '–ü–æ –≤—Å–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º' if all(is_selected) else f'–í—ã–±—Ä–∞–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {len([i for i in is_selected if i])}'
        text_and_data.insert(0, [btn, 'selectseller_reports'])
        schema.insert(0,  1)
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema)
    return text.as_html(), reply_markup

def inline_kb_reports_byperiod(db_request, state, tg_id : str, period : str, page : int = 1, search : str = None):
    text_period = '–°–ï–ì–û–î–ù–Ø' if period == 'today' else '–í–ß–ï–†–ê' if period == 'yesterday' else '7 –î–ù–ï–ô' if period == 'week' else '30 –î–ù–ï–ô' if period == 'month' else period
    text = as_line(Bold(f'–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê {text_period}'),
                   '',
                   sep='\n'
    )
    if search:
        text += as_line(Bold('–ü–æ–∏—Å–∫: '), f'üîç¬†"{search}"\n', sep=' ')
    user = db_request.get_user(tg_id=tg_id)
    sellers = db_request.get_seller(user_id=user.id)
    is_selected = []
    today_orders = []
    today_sales = []
    today_returns = []
    text_for_sorting = {}
    if user.reports_groupby == ReportsGroupBy.WITHOUTGROUP:
        for seller in sellers:
            employee = db_request.get_employee(seller_id=seller.id, user_id=user.id)
            is_selected.append(employee.is_selected)
            if employee.is_selected:
                if search:
                    today_orders += [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in db_request.get_order(seller_id=seller.id, period=period, select_for='reports') if str(o['nmId']) == search or str(o['supplierArticle']) == search or str(o['brand']) == search or str(o['subject']) == search]
                    today_sales += [s['priceWithDisc'] for s in db_request.get_sale(seller_id=seller.id, period=period, type='S', select_for='reports') if str(s['nmId']) == search or str(s['supplierArticle']) == search or str(s['brand']) == search or str(s['subject']) == search]
                    today_returns += [s['priceWithDisc'] for s in db_request.get_sale(seller_id=seller.id, period=period, type='R', select_for='reports') if str(s['nmId']) == search or str(s['supplierArticle']) == search or str(s['brand']) == search or str(s['subject']) == search]
                else:
                    today_orders += [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in db_request.get_order(seller_id=seller.id, period=period, select_for='reports')]
                    today_sales += [s['priceWithDisc'] for s in db_request.get_sale(seller_id=seller.id, period=period, type='S', select_for='reports')]
                    today_returns += [s['priceWithDisc'] for s in db_request.get_sale(seller_id=seller.id, period=period, type='R', select_for='reports')]
        
        text += as_line(f"üõí –ó–∞–∫–∞–∑—ã:        {len(today_orders)} –Ω–∞ {'{0:,}'.format(int(sum(today_orders))).replace(',', ' ')}‚ÇΩ",
                        f"üí≥ –í—ã–∫—É–ø—ã:       {len(today_sales)} –Ω–∞ {'{0:,}'.format(int(sum(today_sales))).replace(',', ' ')}‚ÇΩ",
                        f'‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã:   ‚ÄØ{len(today_returns)}',
                        sep='\n'
        )
    elif user.reports_groupby == ReportsGroupBy.SUBJECT:
        for seller in sellers:
            employee = db_request.get_employee(seller_id=seller.id, user_id=user.id)
            is_selected.append(employee.is_selected)
            if employee.is_selected:
                if search:
                    orders = [o for o in db_request.get_order(seller_id=seller.id, period=period, select_for='reports') if str(o['nmId']) == search or str(o['supplierArticle']) == search or str(o['brand']) == search or str(o['subject']) == search]
                    sales = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='S', select_for='reports') if str(s['nmId']) == search or str(s['supplierArticle']) == search or str(s['brand']) == search or str(s['subject']) == search]
                    returns = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='R', select_for='reports') if str(s['nmId']) == search or str(s['supplierArticle']) == search or str(s['brand']) == search or str(s['subject']) == search]
                else:
                    orders = [o for o in db_request.get_order(seller_id=seller.id, period=period, select_for='reports')]
                    sales = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='S', select_for='reports')]
                    returns = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='R', select_for='reports')]
                
                for subject in list(set([o['subject'] for o in orders] + [s['subject'] for s in sales] + [r['subject'] for r in returns])):
                    subject_orders = [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in orders if o['subject'] == subject]
                    subject_sales = [s['priceWithDisc'] for s in sales if s['subject'] == subject]
                    subject_returns = [r['priceWithDisc'] for r in returns if r['subject'] == subject]
                    text_for_sorting[len(subject_orders)] = as_line(Bold(subject),
                                    f"üõí –ó–∞–∫–∞–∑—ã:        {len(subject_orders)} –Ω–∞ {'{0:,}'.format(int(sum(subject_orders))).replace(',', ' ')}‚ÇΩ",
                                    f"üí≥ –í—ã–∫—É–ø—ã:       {len(subject_sales)} –Ω–∞ {'{0:,}'.format(int(sum(subject_sales))).replace(',', ' ')}‚ÇΩ",
                                    f'‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã:   ‚ÄØ{len(subject_returns)}',
                                    '',
                                    sep='\n', 
                                    )
    elif user.reports_groupby == ReportsGroupBy.ARTICLES:
        for seller in sellers:
            employee = db_request.get_employee(seller_id=seller.id, user_id=user.id)
            is_selected.append(employee.is_selected)
            if employee.is_selected:
                
                if search:
                    orders = [o for o in db_request.get_order(seller_id=seller.id, period=period, select_for='reports') if str(o['nmId']) == search or str(o['supplierArticle']) == search or str(o['brand']) == search or str(o['subject']) == search]
                    sales = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='S', select_for='reports') if str(s['nmId']) == search or str(s['supplierArticle']) == search or str(s['brand']) == search or str(s['subject']) == search]
                    returns = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='R', select_for='reports') if str(s['nmId']) == search or str(s['supplierArticle']) == search or str(s['brand']) == search or str(s['subject']) == search]
                else:
                    orders = [o for o in db_request.get_order(seller_id=seller.id, period=period, select_for='reports')]
                    sales = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='S', select_for='reports')]
                    returns = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='R', select_for='reports')]
                

                for article in list(set([o['nmId'] for o in orders] + [s['nmId'] for s in sales] + [r['nmId'] for r in returns])):
                    article_orders = [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in orders if o['nmId'] == article]
                    article_sales = [s['priceWithDisc'] for s in sales if s['nmId'] == article]
                    article_returns = [r['priceWithDisc'] for r in returns if r['nmId'] == article]
                    text_for_sorting[len(article_orders)] = as_line(Underline(TextLink(article, url=f'https://www.wildberries.ru/catalog/{article}/detail.aspx')),
                                    f"üõí –ó–∞–∫–∞–∑—ã:        {len(article_orders)} –Ω–∞ {'{0:,}'.format(int(sum(article_orders))).replace(',', ' ')}‚ÇΩ",
                                    f"üí≥ –í—ã–∫—É–ø—ã:       {len(article_sales)} –Ω–∞ {'{0:,}'.format(int(sum(article_sales))).replace(',', ' ')}‚ÇΩ",
                                    f'‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã:   ‚ÄØ{len(article_returns)}',
                                    f'üìÅ {db_request.get_product(nmId=article).subject}',
                                    as_line(f"üè∑ {seller.name} / ", Underline(TextLink(db_request.get_product(nmId=article).supplierArticle, url=f'https://www.wildberries.ru/catalog/{article}/detail.aspx'))),
                                    sep='\n', 
                                    )
    
    elif user.reports_groupby == ReportsGroupBy.BRANDS:
        
        for seller in sellers:
            employee = db_request.get_employee(seller_id=seller.id, user_id=user.id)
            is_selected.append(employee.is_selected)
            if employee.is_selected:
                if search:
                    orders = [o for o in db_request.get_order(seller_id=seller.id, period=period, select_for='reports') if str(o['nmId']) == search or str(o['supplierArticle']) == search or str(o['brand']) == search or str(o['subject']) == search]
                    sales = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='S', select_for='reports') if str(s['nmId']) == search or str(s['supplierArticle']) == search or str(s['brand']) == search or str(s['subject']) == search]
                    returns = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='R', select_for='reports') if str(s['nmId']) == search or str(s['supplierArticle']) == search or str(s['brand']) == search or str(s['subject']) == search]
                else:
                    orders = [o for o in db_request.get_order(seller_id=seller.id, period=period, select_for='reports')]
                    sales = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='S', select_for='reports')]
                    returns = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='R', select_for='reports')]
                

                for brand in list(set([o['brand'] for o in orders] + [s['brand'] for s in sales] + [r['brand'] for r in returns])):
                    brand_orders = [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in orders if o['brand'] == brand]
                    brand_sales = [s['priceWithDisc'] for s in sales if s['brand'] == brand]
                    brand_returns = [r['priceWithDisc'] for r in returns if r['brand'] == brand]
                    text_for_sorting[len(brand_orders)] = as_line(Bold(brand),
                                                                    f"üõí –ó–∞–∫–∞–∑—ã:        {len(brand_orders)} –Ω–∞ {'{0:,}'.format(int(sum(brand_orders))).replace(',', ' ')}‚ÇΩ",
                                                                    f"üí≥ –í—ã–∫—É–ø—ã:       {len(brand_sales)} –Ω–∞ {'{0:,}'.format(int(sum(brand_sales))).replace(',', ' ')}‚ÇΩ",
                                                                    f'‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã:   ‚ÄØ{len(brand_returns)}',
                                                                    '',
                                                                    sep='\n'
                    )

    elif user.reports_groupby == ReportsGroupBy.REGIONS:
        regions = {}
        for seller in sellers:
            employee = db_request.get_employee(seller_id=seller.id, user_id=user.id)
            is_selected.append(employee.is_selected)
            if employee.is_selected:
                if search:
                    orders = [o for o in db_request.get_order(seller_id=seller.id, period=period, select_for='reports') if str(o['nmId']) == search or str(o['supplierArticle']) == search or str(o['brand']) == search or str(o['subject']) == search]
                    sales = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='S', select_for='reports') if str(s['nmId']) == search or str(s['supplierArticle']) == search or str(s['brand']) == search or str(s['subject']) == search]
                    returns = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='R', select_for='reports') if str(s['nmId']) == search or str(s['supplierArticle']) == search or str(s['brand']) == search or str(s['subject']) == search]
                else:
                    orders = [o for o in db_request.get_order(seller_id=seller.id, period=period, select_for='reports')]
                    sales = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='S', select_for='reports')]
                    returns = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='R', select_for='reports')]
                
                for region in list(set([o['oblast'] for o in orders] + [s['regionName'] for s in sales] + [r['regionName'] for r in returns])):
                    region_orders = [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in orders if o['oblast'] == region]
                    region_sales = [s['priceWithDisc'] for s in sales if s['regionName'] == region]
                    region_returns = [r['priceWithDisc'] for r in returns if r['regionName'] == region]
                    try:
                        regions[region]
                        regions[region]['len_orders'] += len(region_orders)
                        regions[region]['sum_orders'] += sum(region_orders)
                        regions[region]['len_sales'] += len(region_sales)
                        regions[region]['sum_sales'] += sum(region_sales)
                        regions[region]['sum_sales'] += len(region_returns)
                    except:
                        regions[region] = {'len_orders' : len(region_orders), 'sum_orders' : sum(region_orders), 'len_sales' : len(region_sales), 'sum_sales' : sum(region_sales), 'len_returns' : len(region_returns)}
        for region, values in regions.items():
            text_for_sorting[values['len_orders']] = as_line(Bold(region),
                                                            f"üõí –ó–∞–∫–∞–∑—ã:        {values['len_orders']} –Ω–∞ {'{0:,}'.format(int(values['sum_orders'])).replace(',', ' ')}‚ÇΩ",
                                                            f"üí≥ –í—ã–∫—É–ø—ã:       {values['len_sales']} –Ω–∞ {'{0:,}'.format(int(values['sum_sales'])).replace(',', ' ')}‚ÇΩ",
                                                            f"‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã:   ‚ÄØ{values['len_returns']}",
                                                            '',
                                                            sep='\n'
            )

    elif user.reports_groupby == ReportsGroupBy.CATEGORIES:
        for seller in sellers:
            employee = db_request.get_employee(seller_id=seller.id, user_id=user.id)
            is_selected.append(employee.is_selected)
            if employee.is_selected:
                if search:
                    orders = [o for o in db_request.get_order(seller_id=seller.id, period=period, select_for='reports') if str(o['nmId']) == search or str(o['supplierArticle']) == search or str(o['brand']) == search or str(o['subject']) == search]
                    sales = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='S', select_for='reports') if str(s['nmId']) == search or str(s['supplierArticle']) == search or str(s['brand']) == search or str(s['subject']) == search]
                    returns = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='R', select_for='reports') if str(s['nmId']) == search or str(s['supplierArticle']) == search or str(s['brand']) == search or str(s['subject']) == search]
                else:
                    orders = [o for o in db_request.get_order(seller_id=seller.id, period=period, select_for='reports')]
                    sales = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='S', select_for='reports')]
                    returns = [s for s in db_request.get_sale(seller_id=seller.id, period=period, type='R', select_for='reports')]
                
                for category in list(set([o['category'] for o in orders] + [s['category'] for s in sales] + [r['category'] for r in returns])):
                    category_orders = [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in orders if o['category'] == category]
                    category_sales = [s['priceWithDisc'] for s in sales if s['category'] == category]
                    category_returns = [r['priceWithDisc'] for r in returns if r['category'] == category]
                    text_for_sorting[len(category_orders)] = as_line(Bold(category),
                                                                    f"üõí –ó–∞–∫–∞–∑—ã:        {len(category_orders)} –Ω–∞ {'{0:,}'.format(int(sum(category_orders))).replace(',', ' ')}‚ÇΩ",
                                                                    f"üí≥ –í—ã–∫—É–ø—ã:       {len(category_sales)} –Ω–∞ {'{0:,}'.format(int(sum(category_sales))).replace(',', ' ')}‚ÇΩ",
                                                                    f'‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã:   ‚ÄØ{len(category_returns)}',
                                                                    '',
                                                                    sep='\n'
                    )
                                                                    
    sorted_text_list = sorted(text_for_sorting.items(), reverse=True)
    for _, value in sorted_text_list[page * 10 - 10:page * 10]:
        text += value

    search_btn = ['‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–∞', f'reportsdeny_{period}_1'] if search else ['üîç –ü–æ–∏—Å–∫', f'search_{period}_report']

    text_and_data = [
        ['–ü—Ä–µ–¥–º–µ—Ç—ã', f'reports_subject_{period}_1'],
        ['–ê—Ä—Ç–∏–∫—É–ª—ã', f'reports_articles_{period}_1'],
        ['–ë—Ä–µ–Ω–¥—ã', f'reports_brands_{period}_1'],
        ['–†–µ–≥–∏–æ–Ω—ã', f'reports_regions_{period}_1'],
        ['–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', f'reports_categories_{period}_1'],
        ['–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏', f'reports_withoutgroup_{period}_1'],
        btn_back('reports'),
        search_btn,
    ]
    schema = [2, 2, 2, 2]
    for i in range(len(text_and_data)):
        if str(user.reports_groupby).replace('ReportsGroupBy.', '').lower() in text_and_data[i][1]:
            text_and_data[i][0] = 'üü¢ ' + text_and_data[i][0]
            text_and_data[i][1] = 'none' 
    if page == 1:
        if len(sorted_text_list) > 10:
            text_and_data.insert(0, ['–°–ª–µ–¥ ‚û°Ô∏è', f'reports_{period}_{page + 1}'])
            schema.insert(0, 1)
    elif page == (len(sorted_text_list) // 10) + 1 or page == len(sorted_text_list) // 10:
        text_and_data.insert(0, ['‚¨ÖÔ∏è –ü—Ä–µ–¥', f'reports_{period}_{page - 1}'])
        schema.insert(0, 1)
    else:
        text_and_data.insert(0, ['–°–ª–µ–¥ ‚û°Ô∏è', f'reports_{period}_{page + 1}'])
        text_and_data.insert(0, ['‚¨ÖÔ∏è –ü—Ä–µ–¥', f'reports_{period}_{page - 1}'])
        schema.insert(0, 2)
    
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema)
    return text.as_html(), reply_markup

def inline_kb_reports_timedelta():
    text = as_line('üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:',
                   '\n\n',
                   as_line('–ü—Ä–∏–º–µ—Ä 1: ', Code('02.10.2023'), sep=' '),
                   '',
                   as_line('–ü—Ä–∏–º–µ—Ä 2: ', Code('18.09.2023 - 25.09.2023', sep=' ')),
                   sep='')
    text_and_data = [['‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞', 'delete_msg']]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_search():
    text = as_line("üîç –ò—Å–∫–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É WB, –∞—Ä—Ç–∏–∫—É–ª—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞,  –±—Ä–µ–Ω–¥—É, –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω—É.",
                   "",
                   "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: üëáüèª",
                   sep="\n")
    text_and_data = [['‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞', 'delete_msg']]
    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data)
    return text.as_html(), reply_markup

def inline_kb_orders(db_request, tg_id : str = None, page : int = None, search : str = None):
    user = db_request.get_user(tg_id=tg_id)
    text = as_line(Bold('–ó–ê–ö–ê–ó–´'))
    if search:
        text += as_line(Bold('–ü–æ–∏—Å–∫: '), f'üîç¬†"{search}"\n', sep=' ')
    orders = db_request.get_order(tg_id=tg_id)
    
    if user.reports_groupby_period == ReportsGroupByPeriod.WITHOUTGROUP:
        grouped_orders = []
        for order in orders:
            if search:
                if str(order['nmId']) != search \
                    and str(order['supplierArticle']) != search \
                    and str(order['brand']) != search \
                    and str(order['subject']) != search:
                    continue
            grouped_orders.append(as_line(order['date'].strftime('%d.%m.%Y %H:%M'), 
                            '\n',
                            Bold(f"üõí {int(order['totalPrice'] * (1 - order['discountPercent'] / 100))}‚ÇΩ"),
                            '\n',
                            f"üÜî {order['srid']}", 
                            '\n',
                            as_line(f"üÜî –ê—Ä—Ç–∏–∫—É–ª WB: ", TextLink(order['nmId'], url=f"https://www.wildberries.ru/catalog/{order['nmId']}/detail.aspx"), sep=''), 
                            f"üìÅ {order['subject']}",
                            '\n',
                            as_line(f"üè∑ {order['brand']} / ", TextLink(order['supplierArticle'], url=f"https://www.wildberries.ru/catalog/{order['nmId']}/detail.aspx"), sep=''),
                            f"üåê {order['oblast']}",
                            '\n',
                            f"üì¶ {order['warehouseName']}",
                            '\n'
                            ))
        if len(grouped_orders) == 0:
            text += as_line('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
        for row in grouped_orders[page * 10 - 10: page * 10]:
            text += row
            
    
    else:
        grouped_orders = {}
        for order in orders:
            if search:
                if str(order['nmId']) != search \
                    and str(order['supplierArticle']) != search \
                    and str(order['brand']) != search \
                    and str(order['subject']) != search:
                    continue
            if user.reports_groupby_period == ReportsGroupByPeriod.DAYS:
                date = order['date'].strftime('%d.%m.%Y')
            elif user.reports_groupby_period == ReportsGroupByPeriod.WEEKS:
                date = f"–ù–µ–¥–µ–ª—è {order['date'].isocalendar().week} {order['date'].year}"
            elif user.reports_groupby_period == ReportsGroupByPeriod.MONTHS:
                date = order['date'].strftime('%m.%Y')
            if date in grouped_orders:
                if order['nmId'] in grouped_orders[date]:
                    grouped_orders[date][order['nmId']] += [order]
                else:
                    grouped_orders[date][order['nmId']] = [order]
            else:
                grouped_orders[date] = {}
                grouped_orders[date][order['nmId']] = [order]
        counter = 1
        for key, value in grouped_orders.items():
            for dkey, dvalue in value.items():
                if counter <= page * 10 and counter >= page * 10 - 10:
                    price = [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in dvalue]
                    text += as_line(Italic(key),
                                    '\n',
                                    Bold(f"üõí –í—Å–µ–≥–æ: {len(dvalue)} –Ω–∞ {int(sum(price))}‚ÇΩ"),
                                    '\n',
                                    as_line(f"üÜî –ê—Ä—Ç–∏–∫—É–ª WB: ", Underline(TextLink(dkey, url=f"https://www.wildberries.ru/catalog/{dkey}/detail.aspx")), sep=''),
                                    f"üìÅ {dvalue[0]['subject']}",
                                    '\n',
                                    as_line(f"üè∑ {dvalue[0]['brand']} / ", Underline(TextLink(dvalue[0]['supplierArticle'], url=f"https://www.wildberries.ru/catalog/{dkey}/detail.aspx")), sep=''),
                                    f"üí∞ –¶–µ–Ω–∞: {int(sum(price)/len(price))}‚ÇΩ (—Å—Ä–µ–¥–Ω—è—è)", 
                                    '\n',
                                    )
                counter += 1

        if len(grouped_orders) == 0:
            text += as_line('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')

    search_btn = ['‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–∞', 'reportorders_deny_1'] if search else ['üîç –ü–æ–∏—Å–∫', 'search_orders']
    search_code = f'{search.replace(" ", "-20")}_' if search else ''
    text_and_data = [
        ['–ü–æ –¥–Ω—è–º', f'reportorders_{search_code}days_1'],
        ['–ü–æ –Ω–µ–¥–µ–ª—è–º', f'reportorders_{search_code}weeks_1'],
        ['–ü–æ –º–µ—Å—è—Ü–∞–º', f'reportorders_{search_code}months_1'],
        ['–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏', f'reportorders_{search_code}withoutgroup_1'],
        btn_back('reports'),
        search_btn,
    ]
    schema = [2,2,2]

    if page == 1:
        if len(grouped_orders) > 10:
            text_and_data.insert(0, ['–°–ª–µ–¥ ‚û°Ô∏è', f'reportorders_{search_code}{page + 1}'])
            schema.insert(0, 1)
    elif page == (len(grouped_orders) // 10) + 1 or page == len(grouped_orders) // 10:
        text_and_data.insert(0, ['‚¨ÖÔ∏è –ü—Ä–µ–¥', f'reportorders_{search_code}{page - 1}'])
        schema.insert(0, 1)
    else:
        text_and_data.insert(0, ['–°–ª–µ–¥ ‚û°Ô∏è', f'reportorders_{search_code}{page + 1}'])
        text_and_data.insert(0, ['‚¨ÖÔ∏è –ü—Ä–µ–¥', f'reportorders_{search_code}{page - 1}'])
        schema.insert(0, 2)

    for i in range(len(text_and_data)):
        if str(user.reports_groupby_period).replace('ReportsGroupByPeriod.', '').lower() in text_and_data[i][1]:
            text_and_data[i][0] = 'üü¢ ' + text_and_data[i][0]
            text_and_data[i][1] = 'none' 

    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema)
    return text.as_html(), reply_markup

def inline_kb_sales(db_request, tg_id : str = None, page : int = None, search : str = None, type : str = None):
    user = db_request.get_user(tg_id=tg_id)
    text = as_line(Bold('–í–´–ö–£–ü–´')) if type == 'S' else as_line(Bold('–í–û–ó–í–†–ê–¢–´')) if type == 'R' else as_line(Bold('–®–¢–†–ê–§–´'))
    if search:
        text += as_line(Bold('–ü–æ–∏—Å–∫: '), f'üîç¬†"{search}"\n', sep=' ')
    sales = db_request.get_sale(tg_id=tg_id, type=type)
    
    if user.reports_groupby_period == ReportsGroupByPeriod.WITHOUTGROUP:
        grouped_sales = []
        for sale in sales:
            if search:
                if str(sale['nmId']) != search \
                    and str(sale['supplierArticle']) != search \
                    and str(sale['brand']) != search \
                    and str(sale['subject']) != search:
                    continue
            grouped_sales.append(as_line(sale['date'].strftime('%d.%m.%Y %H:%M'), 
                            '\n',
                            Bold(f"üõí {int(sale['priceWithDisc'])}‚ÇΩ"),
                            '\n',
                            f"üÜî {sale['srid']}", 
                            '\n',
                            as_line(f"üÜî –ê—Ä—Ç–∏–∫—É–ª WB: ", TextLink(sale['nmId'], url=f"https://www.wildberries.ru/catalog/{sale['nmId']}/detail.aspx"), sep=''), 
                            f"üìÅ {sale['subject']}",
                            '\n',
                            as_line(f"üè∑ {sale['brand']} / ", TextLink(sale['supplierArticle'], url=f"https://www.wildberries.ru/catalog/{sale['nmId']}/detail.aspx"), sep=''),
                            f"üåê {sale['oblast']}",
                            '\n',
                            f"üì¶ {sale['warehouseName']}",
                            '\n'
                            ))
        if len(grouped_sales) == 0:
            text += as_line('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
        for row in grouped_sales[page * 10 - 10: page * 10]:
            text += row
    
    else:
        grouped_sales = {}
        for sale in sales:
            if search:
                if str(sale['nmId']) != search \
                    and str(sale['supplierArticle']) != search \
                    and str(sale['brand']) != search \
                    and str(sale['subject']) != search:
                    continue
            if user.reports_groupby_period == ReportsGroupByPeriod.DAYS:
                date = sale['date'].strftime('%d.%m.%Y')
            elif user.reports_groupby_period == ReportsGroupByPeriod.WEEKS:
                date = f"–ù–µ–¥–µ–ª—è {sale['date'].isocalendar().week} {sale['date'].year}"
            elif user.reports_groupby_period == ReportsGroupByPeriod.MONTHS:
                date = sale['date'].strftime('%m.%Y')
            if date in grouped_sales:
                if sale['nmId'] in grouped_sales[date]:
                    grouped_sales[date][sale['nmId']] += [sale]
                else:
                    grouped_sales[date][sale['nmId']] = [sale]
            else:
                grouped_sales[date] = {}
                grouped_sales[date][sale['nmId']] = [sale]
        counter = 1
        for key, value in grouped_sales.items():
            for dkey, dvalue in value.items():
                if counter <= page * 10 and counter >= page * 10 - 10:
                    price = [s['priceWithDisc'] for s in dvalue]
                    text += as_line(Italic(key),
                                    '\n',
                                    Bold(f"üõí –í—Å–µ–≥–æ: {len(dvalue)} –Ω–∞ {int(sum(price))}‚ÇΩ"),
                                    '\n',
                                    as_line(f"üÜî –ê—Ä—Ç–∏–∫—É–ª WB: ", Underline(TextLink(dkey, url=f"https://www.wildberries.ru/catalog/{dkey}/detail.aspx")), sep=''),
                                    f"üìÅ {dvalue[0]['subject']}",
                                    '\n',
                                    as_line(f"üè∑ {dvalue[0]['brand']} / ", Underline(TextLink(dvalue[0]['supplierArticle'], url=f"https://www.wildberries.ru/catalog/{dkey}/detail.aspx")), sep=''),
                                    f"üí∞ –¶–µ–Ω–∞: {int(sum(price)/len(price))}‚ÇΩ (—Å—Ä–µ–¥–Ω—è—è)", 
                                    '\n',
                                    )
                counter += 1

        if len(grouped_sales) == 0:
            text += as_line('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')

    search_btn = ['‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–∞', 'repsales_deny_1'] if search else ['üîç –ü–æ–∏—Å–∫', 'search_orders']
    search_code = f'{search.replace(" ", "-20")}_' if search else ''
    text_and_data = [
        ['–ü–æ –¥–Ω—è–º', f'repsales{type}_{search_code}days_1'],
        ['–ü–æ –Ω–µ–¥–µ–ª—è–º', f'repsales{type}_{search_code}weeks_1'],
        ['–ü–æ –º–µ—Å—è—Ü–∞–º', f'repsales{type}_{search_code}months_1'],
        ['–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏', f'repsales{type}_{search_code}withoutgroup_1'],
        btn_back('reports'),
        search_btn,
    ]
    schema = [2,2,2]

    if page == 1:
        if len(grouped_sales) > 10:
            text_and_data.insert(0, ['–°–ª–µ–¥ ‚û°Ô∏è', f'repsales{type}_{search_code}{page + 1}'])
            schema.insert(0, 1)
    elif page == (len(grouped_sales) // 10) + 1 or page == len(grouped_sales) // 10:
        text_and_data.insert(0, ['‚¨ÖÔ∏è –ü—Ä–µ–¥', f'repsales{type}_{search_code}{page - 1}'])
        schema.insert(0, 1)
    else:
        text_and_data.insert(0, ['–°–ª–µ–¥ ‚û°Ô∏è', f'repsales{type}_{search_code}{page + 1}'])
        text_and_data.insert(0, ['‚¨ÖÔ∏è –ü—Ä–µ–¥', f'repsales{type}_{search_code}{page - 1}'])
        schema.insert(0, 2)

    for i in range(len(text_and_data)):
        if str(user.reports_groupby_period).replace('ReportsGroupByPeriod.', '').lower() in text_and_data[i][1]:
            text_and_data[i][0] = 'üü¢ ' + text_and_data[i][0]
            text_and_data[i][1] = 'none' 

    reply_markup = InlineConstructor.create_kb(text_and_data=text_and_data, schema=schema)
    return text.as_html(), reply_markup

def inline_kb_new_order(db_request, order_id : int):
    order = db_request.get_order(id=order_id)
    product = db_request.get_product(id=order.product.id)
    price = order.totalPrice * (1 - order.discountPercent / 100)
    product_warehouse = db_request.get_product_warehouse(product_id=product.id)
    sales_list = db_request.get_sale(product_id=product.id, type='S', period=f"{(datetime.now() - timedelta(days=91)).strftime('%d.%m.%Y')} - {datetime.now().strftime('%d.%m.%Y')}")
    inWayToClient = sum([p.inWayToClient for p in product_warehouse])
    inWayFromClient = sum([p.inWayFromClient for p in product_warehouse])
    sales = len(sales_list) - inWayFromClient
    gNumbers = [s['gNumber'] for s in sales_list]
    orders = db_request.get_order(product_id=product.id, period=f"{(datetime.now() - timedelta(days=91)).strftime('%d.%m.%Y')} - {datetime.now().strftime('%d.%m.%Y')}")
    today_orders = [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in orders if o['date'].date() == datetime.now().date()]
    today_orders_such = [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in orders if o['date'].date() == datetime.now().date() and o['nmId'] == order.nmId]
    yesterday_orders_such = [o['totalPrice'] * (1 - o['discountPercent'] / 100) for o in orders if o['date'].date() == (datetime.now() - timedelta(days=1)).date() and o['nmId'] == order.nmId]
    orders_list = [o for o in orders if o['gNumber'] in gNumbers]
    buyout = int((sales/len(orders_list)) * 100)
    text = as_line(order.date,
                   f'üõí –ó–∞–∫–∞–∑ [{len(today_orders)}]: {price}‚ÇΩ',
                   f'üìà –°–µ–≥–æ–¥–Ω—è: {len(today_orders)} –Ω–∞ {int(sum(today_orders))}‚ÇΩ',
                   f'üÜî –ê—Ä—Ç: {order.nmId}¬†üëâüèª',
                   f'üõçÔ∏è WB —Å–∫–∏–¥–∫–∞: {round(order.totalPrice * (order.discountPercent / 100), 2)}‚ÇΩ ({order.discountPercent}%)',
                   f'üìÅ {product.subject}',
                   f'üè∑ {product.brand} / {product.supplierArticle}',
                   f'‚≠ê –†–µ–π—Ç–∏–Ω–≥: {product.rating}',
                   f'üí¨¬†–û—Ç–∑—ã–≤—ã: {product.reviews}',
                   f'üíµ –°–µ–≥–æ–¥–Ω—è —Ç–∞–∫–∏—Ö: {len(today_orders_such)} –Ω–∞ {int(sum(today_orders_such))}‚ÇΩ',
                   f'üí∂ –í—á–µ—Ä–∞ —Ç–∞–∫–∏—Ö: {len(yesterday_orders_such)} –Ω–∞ {int(sum(yesterday_orders_such))}‚ÇΩ',
                   'üü• ABC-–∞–Ω–∞–ª–∏–∑: C (5.78%)',
                   f'üíº –ö–æ–º–∏—Å—Å–∏—è –±–∞–∑–æ–≤–∞—è: {price * (1 - 19/100)}‚ÇΩ (19%)',
                   'üí• –ê–∫—Ü–∏—è: ???',
                   f'üíé –í—ã–∫—É–ø –∑–∞ 3 –º–µ—Å: {buyout}% ({sales}/{len(orders_list)})',
                   f'üåê {order.warehouseName} ‚Üí {order.oblast}: ???‚ÇΩ',
                   f'üöõ –í –ø—É—Ç–∏ –¥–æ –∫–ª–∏–µ–Ω—Ç–∞: {inWayToClient}',
                   f'üöö –í –ø—É—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç—ã: {inWayFromClient}',
                   'üì¶ –ê–ª–µ–∫—Å–∏–Ω: ??? —à—Ç. —Ö–≤–∞—Ç–∏—Ç –Ω–∞ ???¬†–¥–Ω.',
                   '',
                   sep='\n'
                   )
    return text.as_html()